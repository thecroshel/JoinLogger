<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Exiled.CustomModules</name>
    </assembly>
    <members>
        <member name="T:Exiled.CustomModules.API.Commands.CustomItem.Give">
            <summary>
            The command to give a player an item.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Give.Instance">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Commands.CustomItem.Give"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Give.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Give.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Give.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomItem.Give.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomItem.Give.CheckEligible(Exiled.API.Features.Player)">
            <summary>
            Checks if the player is eligible to receive custom items.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Commands.CustomItem.Info">
            <summary>
            The command to view info about a specific item.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Info.Instance">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Commands.CustomItem.Info"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Info.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Info.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Info.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomItem.Info.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Commands.CustomItem.List.List">
            <summary>
            The command to list all installed items.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.List.List.Instance">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Commands.CustomItem.Info"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.List.List.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.List.List.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.List.List.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomItem.List.List.LoadGeneratedCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomItem.List.List.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Commands.CustomItem.List.Registered">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.List.Registered.Instance">
            <summary>
            Gets the command instance.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.List.Registered.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.List.Registered.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.List.Registered.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomItem.List.Registered.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Commands.CustomItem.List.Tracked">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.List.Tracked.Instance">
            <summary>
            Gets the command instance.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.List.Tracked.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.List.Tracked.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.List.Tracked.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomItem.List.Tracked.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Commands.CustomItem.Parent">
            <summary>
            The main parent command for custom items..
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomItem.Parent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Commands.CustomItem.Parent"/> class.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Parent.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Parent.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Parent.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomItem.Parent.LoadGeneratedCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomItem.Parent.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Commands.CustomItem.Spawn">
            <summary>
            The command to spawn a specific item.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Spawn.Instance">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Commands.CustomItem.Spawn"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Spawn.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Spawn.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomItem.Spawn.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomItem.Spawn.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Commands.CustomRoles.Give">
            <summary>
            The command to give a role to player(s).
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.Give.Instance">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Commands.CustomRoles.Give"/> command instance.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.Give.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.Give.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.Give.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomRoles.Give.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Commands.CustomRoles.Info">
            <summary>
            The command to view info about a specific role.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.Info.Instance">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Commands.CustomRoles.Info"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.Info.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.Info.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.Info.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomRoles.Info.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Commands.CustomRoles.List.List">
            <summary>
            The command to list all registered roles.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.List.List.Instance">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Commands.CustomRoles.List.List"/> command instance.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.List.List.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.List.List.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.List.List.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomRoles.List.List.LoadGeneratedCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomRoles.List.List.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Commands.CustomRoles.List.Registered">
            <inheritdoc />
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.List.Registered.Instance">
            <summary>
            Gets the command instance.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.List.Registered.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.List.Registered.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.List.Registered.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomRoles.List.Registered.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Commands.CustomRoles.Parent">
            <summary>
            The main parent command for customroles.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomRoles.Parent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Commands.CustomRoles.Parent"/> class.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.Parent.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.Parent.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Commands.CustomRoles.Parent.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomRoles.Parent.LoadGeneratedCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Commands.CustomRoles.Parent.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Enums.FiringMode">
            <summary>
            All available firing modes.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.FiringMode.None">
            <summary>
            Shooting is not allowed.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.FiringMode.SemiAutomatic">
            <summary>
            Semi-automatic firing mode.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.FiringMode.Burst">
            <summary>
            Burst firing mode.
            <para/>
            Only automatic firearms are supported.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.FiringMode.Automatic">
            <summary>
            Automatic firing mode.
            <para/>
            Only automatic firearms are supported.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Enums.UEMatchState">
            <summary>
            All available match states.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UEMatchState.None">
            <summary>
            States the match has no defined state.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UEMatchState.Paused">
            <summary>
            States the match is paused.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UEMatchState.InProgress">
            <summary>
            States the match is in progress.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UEMatchState.Terminated">
            <summary>
            States the match has terminated.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Enums.UEMatchState.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Enums.UEMatchState"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Exiled.CustomModules.API.Enums.UUCustomAbilityType">
            <summary>
            Represents the base enum class for all available custom abilities.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUCustomAbilityType.None">
            <summary>
            Represents an invalid custom ability.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Enums.UUCustomEscapeType">
            <summary>
            Represents the base enum class for all available custom escapes.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUCustomEscapeType.None">
            <summary>
            Represents an invalid custom escapes.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Enums.UUCustomItemType">
            <summary>
            Represents the base enum class for all available custom items.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUCustomItemType.None">
            <summary>
            Represents an invalid custom item.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Enums.UUCustomRoleType">
            <summary>
            Represents the base enum class for all available custom roles.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUCustomRoleType.None">
            <summary>
            Represents an invalid custom role.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Enums.UUCustomTeamType">
            <summary>
            Represents the base enum class for all available custom teams.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUCustomTeamType.None">
            <summary>
            Represents an invalid custom team.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Enums.UUEscapeScenarioType">
            <summary>
            Represents the base enum class for all available escape scenarios.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUEscapeScenarioType.None">
            <summary>
            Represents an invalid scenario.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Enums.UUGameModeType">
            <summary>
            Represents the base enum class for all available custom teams.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUGameModeType.None">
            <summary>
            Represents an invalid custom game mode.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Enums.UUModuleType">
            <summary>
            Enumerates the available module types.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomItems">
            <summary>
            Custom items module.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomAbilities">
            <summary>
            Custom abilities module.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomEscapes">
            <summary>
            Custom escapes module.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomRoles">
            <summary>
            Custom roles module.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomTeams">
            <summary>
            Custom teams module.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomGameModes">
            <summary>
            Custom game modes module.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Extensions.AbilityExtensions">
            <summary>
            A set of extensions for <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.AbilityExtensions.Get``1(Exiled.API.Features.Core.GameEntity)">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> associated with the specified <see cref="T:Exiled.API.Features.Core.GameEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the game entity.</typeparam>
            <param name="entity">The game entity.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> if found; otherwise, null.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.AbilityExtensions.Get``1(Exiled.API.Features.Player)">
            <summary>
            Gets the <typeparamref name="TAbility"/> associated with the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <typeparam name="TAbility">The type of the player ability.</typeparam>
            <param name="player">The player.</param>
            <returns>The <typeparamref name="TAbility"/> if found; otherwise, null.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.AbilityExtensions.Get``1(Exiled.API.Features.Items.Item)">
            <summary>
            Gets the <typeparamref name="TAbility"/> associated with the specified <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
            <typeparam name="TAbility">The type of the item ability.</typeparam>
            <param name="item">The item.</param>
            <returns>The <typeparamref name="TAbility"/> if found; otherwise, null.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.AbilityExtensions.Get``1(Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Gets the <typeparamref name="TAbility"/> associated with the specified <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.
            </summary>
            <typeparam name="TAbility">The type of the pickup ability.</typeparam>
            <param name="pickup">The pickup.</param>
            <returns>The <typeparamref name="TAbility"/> if found; otherwise, null.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.AbilityExtensions.TryGet``1(Exiled.API.Features.Core.GameEntity,Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility{``0}@)">
            <summary>
            Tries to get the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> associated with the specified <see cref="T:Exiled.API.Features.Core.GameEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the game entity.</typeparam>
            <param name="entity">The game entity.</param>
            <param name="ability">When this method returns, contains the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>, if found; otherwise, null.</param>
            <returns><c>true</c> if the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> is found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.AbilityExtensions.TryGet``1(Exiled.API.Features.Player,``0@)">
            <summary>
            Tries to get the <typeparamref name="TAbility"/> associated with the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <typeparam name="TAbility">The type of the player ability.</typeparam>
            <param name="player">The player.</param>
            <param name="playerAbility">When this method returns, contains the <typeparamref name="TAbility"/>, if found; otherwise, null.</param>
            <returns><c>true</c> if the <typeparamref name="TAbility"/> is found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.AbilityExtensions.TryGet``1(Exiled.API.Features.Items.Item,``0@)">
            <summary>
            Tries to get the <typeparamref name="TAbility"/> associated with the specified <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
            <typeparam name="TAbility">The type of the item ability.</typeparam>
            <param name="item">The item.</param>
            <param name="itemAbility">When this method returns, contains the <typeparamref name="TAbility"/>, if found; otherwise, null.</param>
            <returns><c>true</c> if the <typeparamref name="TAbility"/> is found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.AbilityExtensions.TryGet``1(Exiled.API.Features.Pickups.Pickup,``0@)">
            <summary>
            Tries to get the <typeparamref name="TAbility"/> associated with the specified <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.
            </summary>
            <typeparam name="TAbility">The type of the pickup ability.</typeparam>
            <param name="pickup">The pickup.</param>
            <param name="pickupAbility">When this method returns, contains the <typeparamref name="TAbility"/>, if found; otherwise, null.</param>
            <returns><c>true</c> if the <typeparamref name="TAbility"/> is found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Exiled.CustomModules.API.Extensions.ItemExtensions">
            <summary>
            A set of extensions for <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.ItemExtensions.Get(Exiled.API.Features.Items.Item)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Get(Exiled.API.Features.Items.Item)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.ItemExtensions.TryGet(Exiled.API.Features.Items.Item,Exiled.CustomModules.API.Features.CustomItems.CustomItem@)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGet(Exiled.API.Features.Items.Item,Exiled.CustomModules.API.Features.CustomItems.CustomItem@)"/>
        </member>
        <member name="T:Exiled.CustomModules.API.Extensions.PickupExtensions">
            <summary>
            A set of extensions for <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PickupExtensions.Get(Exiled.API.Features.Pickups.Pickup)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Get(Exiled.API.Features.Pickups.Pickup)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PickupExtensions.TryGet(Exiled.API.Features.Pickups.Pickup,Exiled.CustomModules.API.Features.CustomItems.CustomItem@)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGet(Exiled.API.Features.Pickups.Pickup,Exiled.CustomModules.API.Features.CustomItems.CustomItem@)"/>
        </member>
        <member name="T:Exiled.CustomModules.API.Extensions.PlayerExtensions">
            <summary>
            A set of extensions for <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PlayerExtensions.Get(Exiled.API.Features.Player)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get(Exiled.CustomModules.API.Features.Pawn)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PlayerExtensions.Spawn(Exiled.API.Features.Player,Exiled.CustomModules.API.Features.CustomRoles.CustomRole,System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Spawn(Exiled.CustomModules.API.Features.Pawn,Exiled.CustomModules.API.Features.CustomRoles.CustomRole,System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PlayerExtensions.Spawn``1(Exiled.API.Features.Player)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Spawn``1(Exiled.CustomModules.API.Features.Pawn)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PlayerExtensions.Spawn(Exiled.API.Features.Player,System.String,System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Spawn(Exiled.CustomModules.API.Features.Pawn,System.String,System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PlayerExtensions.Spawn(Exiled.API.Features.Player,System.UInt32,System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Spawn(Exiled.CustomModules.API.Features.Pawn,System.UInt32,System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PlayerExtensions.TrySpawn(Exiled.API.Features.Player,Exiled.CustomModules.API.Features.CustomRoles.CustomRole)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TrySpawn(Exiled.CustomModules.API.Features.Pawn,Exiled.CustomModules.API.Features.CustomRoles.CustomRole)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PlayerExtensions.TrySpawn(Exiled.API.Features.Player,System.String)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TrySpawn(Exiled.CustomModules.API.Features.Pawn,System.String)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PlayerExtensions.TrySpawn(Exiled.API.Features.Player,System.UInt32)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TrySpawn(Exiled.CustomModules.API.Features.Pawn,System.UInt32)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PlayerExtensions.TryGet(Exiled.API.Features.Player,Exiled.CustomModules.API.Features.CustomRoles.CustomRole@)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TryGet(Exiled.CustomModules.API.Features.Pawn,Exiled.CustomModules.API.Features.CustomRoles.CustomRole@)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PlayerExtensions.TryGive(Exiled.API.Features.Player,System.String,System.Boolean)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGive(Exiled.API.Features.Player,System.String,System.Boolean)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PlayerExtensions.TryGive(Exiled.API.Features.Player,System.UInt32,System.Boolean)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGive(Exiled.API.Features.Player,System.UInt32,System.Boolean)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Extensions.PlayerExtensions.TryGive(Exiled.API.Features.Player,System.Type,System.Boolean)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGive(Exiled.API.Features.Player,System.Type,System.Boolean)"/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute">
            <summary>
            This attribute determines whether the class which is being applied to should identify a <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/> class.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/> class.
            </summary>
            <param name="id"><inheritdoc cref="P:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute.Id"/></param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute.#ctor(System.UInt32,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/> class.
            </summary>
            <param name="id"><inheritdoc cref="P:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute.Id"/></param>
            <param name="types"><inheritdoc cref="P:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute.Types"/></param>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute.Id">
            <summary>
            Gets the modules's id.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute.Types">
            <summary>
            Gets all component types, if supported by the target module.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent">
            <summary>
            Represents a marker interface for custom ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent.LastActionResponse">
            <summary>
            Gets or sets the last action's response.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent.InputCondition_KT0">
            <summary>
            <inheritdoc/>
            <para/>
            <see cref="F:Exiled.API.Enums.UUKeypressTriggerType.KT_INPUT_0"/> defines an action which displays information about the ability.
            </summary>
            <returns><see langword="true"/> if the condition was satisfied; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent.InputCondition_KT1">
            <summary>
            <inheritdoc/>
            <para/>
            <see cref="F:Exiled.API.Enums.UUKeypressTriggerType.KT_INPUT_1"/> defines an action which activates the ability.
            </summary>
            <returns><see langword="true"/> if the condition was satisfied; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent.InputCondition_KT2">
            <summary>
            <inheritdoc/>
            <para/>
            <see cref="F:Exiled.API.Enums.UUKeypressTriggerType.KT_INPUT_2"/> defines an action which switches backward.
            </summary>
            <returns><see langword="true"/> if the condition was satisfied; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent.InputCondition_KT3">
            <summary>
            <inheritdoc/>
            <para/>
            <see cref="F:Exiled.API.Enums.UUKeypressTriggerType.KT_INPUT_3"/> defines an action which switches forward.
            </summary>
            <returns><see langword="true"/> if the condition was satisfied; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent.InputAction_KT0">
            <summary>
            <inheritdoc/>
            <para/>
            The paired action selects the ability.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent.InputAction_KT1">
            <summary>
            <inheritdoc/>
            <para/>
            The paired action activates the ability.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent.InputAction_KT2">
            <summary>
            <inheritdoc/>
            <para/>
            The paired action switches ability backward.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent.InputAction_KT3">
            <summary>
            <inheritdoc/>
            <para/>
            The paired action switches ability forward.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.AbilityTracker">
            <summary>
            The actor which handles all tracking-related tasks for item abilities.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1">
            <summary>
            Abstract base class serving as a foundation for custom abilities associated with a specific <see cref="T:Exiled.API.Features.Core.GameEntity"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:Exiled.API.Features.Core.GameEntity"/> associated with the custom ability.</typeparam>
            <remarks>
            The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> class establishes a flexible structure for creating and managing custom abilities tied to a particular <see cref="T:Exiled.API.Features.Core.GameEntity"/>.
            <para>
            This class is parameterized by the type <typeparamref name="T"/> to denote the specific <see cref="T:Exiled.API.Features.Core.GameEntity"/> associated with the custom ability.
            <br/>It is designed to be utilized in conjunction with the <see cref="T:Exiled.API.Features.Core.Interfaces.IAdditiveBehaviour"/> interface, enabling seamless integration into existing systems for extending and enhancing ability-related functionalities.
            </para>
            </remarks>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.EntitiesValue">
            <inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Manager"/>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.UnorderedRegistered">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> containing all the registered custom abilites.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Registered">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all the registered custom abilites ordered by their <see cref="T:Exiled.API.Features.Core.GameEntity"/> type.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> containing all the registered custom abilites.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.UnorderedList">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> containing all the registered custom abilites.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Manager">
            <summary>
            Gets all entities and all their respective <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>'s.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Entities">
            <summary>
            Gets all entities belonging to a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.AddingAbilityDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before adding an ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.AddedAbilityDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired after adding an ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemovingAbilityDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before removing an ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemovedAbilityDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired after removing an ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Config">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.BehaviourComponent">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Settings">
            <summary>
            Gets the ability's settings.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Name">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>'s name.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Id">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>'s id.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the ability is enabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Description">
            <summary>
            Gets or sets the description of the ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.ReflectedGenericType">
            <summary>
            Gets the reflected generic type.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Get(System.Object)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> based on the provided id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomAbilityType"/>.
            </summary>
            <param name="id">The id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomAbilityType"/> of the custom ability.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> with the specified id, or <see langword="null"/> if no ability is found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Get(System.UInt32)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> given the specified id.
            </summary>
            <param name="id">The specified id.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> given the specified name.
            </summary>
            <param name="name">The specified name.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Get(System.Type)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> given the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The specified <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Get``1">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> given the specified <see cref="T:System.Type"/> of <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>.
            </summary>
            <typeparam name="TAbility">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Get(Exiled.CustomModules.API.Features.CustomAbilities.IAbilityBehaviour)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> given the specified <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.IAbilityBehaviour"/>.
            </summary>
            <param name="abilityBehaviour">The specified <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.IAbilityBehaviour"/>.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Get(`0)">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> instances from a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="entity">The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>'s owner.</param>
            <returns>All <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> instances matching the search.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.TryGet(System.UInt32,Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility{`0}@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> given the specified id.
            </summary>
            <param name="id">The id to look for.</param>
            <param name="customAbility">The found <paramref name="customAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <paramref name="customAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.TryGet(System.String,Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility{`0}@)">
            <summary>
            Tries to get a <paramref name="customAbility"/> given a specified name.
            </summary>
            <param name="name">The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> name to look for.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.TryGet(`0,System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility{`0}}@)">
            <summary>
            Tries to get the player's current <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>'s.
            </summary>
            <param name="entity">The entity to search on.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>'s, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.TryGet(System.Type,Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility{`0}@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> given the specified type of <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.IAbilityBehaviour"/>.
            </summary>
            <param name="type">The type to search for.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.TryGet``1(``0@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> given the specified type of <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>.
            </summary>
            <typeparam name="TAbility">The type to search for.</typeparam>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Get``1(`0)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Core.EActor"/> associated with the specified custom ability type for the given entity.
            </summary>
            <typeparam name="TAbility">The type of the custom ability.</typeparam>
            <param name="entity">The entity for which the custom ability is associated.</param>
            <returns>The <see cref="T:Exiled.API.Features.Core.EActor"/> associated with the specified custom ability type for the given entity.</returns>
            <remarks>
            This method retrieves the <see cref="T:Exiled.API.Features.Core.EActor"/> associated with the specified custom ability type for the given entity.
            It is typically used to access the behavior component associated with a specific custom ability for an entity.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add``1(`0,``0@)">
            <summary>
            Adds the specified custom ability to the given entity and returns it.
            </summary>
            <typeparam name="TAbility">The type of the custom ability.</typeparam>
            <param name="entity">The entity to which the custom ability will be added.</param>
            <param name="param">The added custom ability instance.</param>
            <returns><see langword="true"/> if the custom ability was added successfully; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method attempts to add the specified custom ability to the given entity. If the addition is successful,
            it returns the added custom ability instance. If the addition fails, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.Type)">
            <summary>
            Adds the custom ability of the specified type to the given entity.
            </summary>
            <param name="entity">The entity to which the custom ability will be added.</param>
            <param name="type">The type of the custom ability.</param>
            <returns><see langword="true"/> if the custom ability was added successfully; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method attempts to add the custom ability of the specified type to the given entity.
            If the addition is successful, it returns <see langword="true"/>. If the addition fails, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.String)">
            <summary>
            Adds the custom ability of the specified type to the given entity.
            </summary>
            <param name="entity">The entity to which the custom ability will be added.</param>
            <param name="type">The type name of the custom ability.</param>
            <returns><see langword="true"/> if the custom ability was added successfully; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method attempts to add the custom ability of the specified type to the given entity.
            If the addition is successful, it returns <see langword="true"/>. If the addition fails, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.UInt32)">
            <summary>
            Adds the custom ability identified by the specified ID to the given entity.
            </summary>
            <param name="entity">The entity to which the custom ability will be added.</param>
            <param name="id">The ID of the custom ability.</param>
            <returns><see langword="true"/> if the custom ability was added successfully; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method attempts to add the custom ability identified by the specified ID to the given entity.
            If the addition is successful, it returns <see langword="true"/>. If the addition fails, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds multiple custom abilities of the specified types to the given entity.
            </summary>
            <param name="entity">The entity to which the custom abilities will be added.</param>
            <param name="types">The types of the custom abilities to be added.</param>
            <remarks>
            This method adds multiple custom abilities of the specified types to the given entity.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds multiple custom abilities identified by their type names to the given entity.
            </summary>
            <param name="entity">The entity to which the custom abilities will be added.</param>
            <param name="types">The type names of the custom abilities to be added.</param>
            <remarks>
            This method adds multiple custom abilities identified by their type names to the given entity.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove``1(`0)">
            <summary>
            Removes the custom ability of type <typeparamref name="TAbility"/> from the specified entity.
            </summary>
            <typeparam name="TAbility">The type of custom ability to be removed.</typeparam>
            <param name="entity">The entity from which the custom ability will be removed.</param>
            <returns><see langword="true"/> if the custom ability was removed successfully; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method removes the custom ability of the specified type from the specified entity. If the removal operation fails,
            the method returns <see langword="false"/>. The removal process involves destroying the active object associated with the custom ability.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0,System.Type)">
            <summary>
            Removes the custom ability of the specified type from the specified entity.
            </summary>
            <param name="entity">The entity from which the custom ability will be removed.</param>
            <param name="type">The type of custom ability to be removed.</param>
            <returns><see langword="true"/> if the custom ability was removed successfully; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method removes the custom ability of the specified type from the specified entity. If the removal operation fails,
            the method returns <see langword="false"/>. The removal process involves destroying the active object associated with the custom ability.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0,System.String)">
            <summary>
            Removes the custom ability of the specified name from the specified entity.
            </summary>
            <param name="entity">The entity from which the custom ability will be removed.</param>
            <param name="name">The name of the custom ability type to be removed.</param>
            <returns><see langword="true"/> if the custom ability was removed successfully; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method removes the custom ability of the specified type from the specified entity. If the removal operation fails,
            the method returns <see langword="false"/>. The removal process involves destroying the active object associated with the custom ability.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0,System.UInt32)">
            <summary>
            Removes the custom ability with the specified ID from the specified entity.
            </summary>
            <param name="entity">The entity from which the custom ability will be removed.</param>
            <param name="id">The ID of the custom ability to be removed.</param>
            <returns><see langword="true"/> if the custom ability was removed successfully; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method removes the custom ability with the specified ID from the specified entity. If the removal operation fails,
            the method returns <see langword="false"/>. The removal process involves destroying the active object associated with the custom ability.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveAll(`0)">
            <summary>
            Removes all custom abilities associated with the specified entity.
            </summary>
            <param name="entity">The entity from which all custom abilities will be removed.</param>
            <remarks>
            This method removes all custom abilities associated with the specified entity. The removal process involves destroying the active objects
            associated with each custom ability. If the entity has no custom abilities, the method has no effect.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveRange(`0,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Removes custom abilities of the specified types from the specified entity.
            </summary>
            <param name="entity">The entity from which custom abilities will be removed.</param>
            <param name="types">The types of custom abilities to be removed.</param>
            <remarks>
            This method removes custom abilities of the specified types from the specified entity. The removal process involves destroying the active objects
            associated with each custom ability. If the entity has no custom abilities of the specified types, the method has no effect.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveRange(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes custom abilities with the specified names from the specified entity.
            </summary>
            <param name="entity">The entity from which custom abilities will be removed.</param>
            <param name="names">The names of custom abilities to be removed.</param>
            <remarks>
            This method removes custom abilities with the specified names from the specified entity. The removal process involves destroying the active objects
            associated with each custom ability. If the entity has no custom abilities with the specified names, the method has no effect.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveRange(`0,System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Removes custom abilities with the specified ids from the specified entity.
            </summary>
            <param name="entity">The entity from which custom abilities will be removed.</param>
            <param name="ids">The ids of custom abilities to be removed.</param>
            <remarks>
            This method removes custom abilities with the specified ids from the specified entity. The removal process involves destroying the active objects
            associated with each custom ability. If the entity has no custom abilities with the specified ids, the method has no effect.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.EnableAll">
            <summary>
            Enables all the custom abilities present in the assembly.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.EnableAll(System.Reflection.Assembly)">
            <summary>
            Enables all the custom abilities present in the assembly.
            </summary>
            <param name="assembly">The assembly to enable the abilities from.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.DisableAll">
            <summary>
            Disables all the custom abilities present in the assembly.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0)">
            <summary>
            Adds the custom ability to the specified entity.
            </summary>
            <param name="entity">The entity to which the custom ability will be added.</param>
            <remarks>
            This method adds the custom ability to the specified entity, incorporating its behavior into the entity's functionality.
            If the entity already has a custom ability of the same type, the method ensures that the entity is associated with the new instance.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0)">
            <summary>
            Removes the custom ability from the specified entity.
            </summary>
            <param name="entity">The entity from which the custom ability will be removed.</param>
            <returns><see langword="true"/> if the custom ability was removed successfully; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method removes the custom ability from the specified entity. If the entity has multiple instances of the same custom ability,
            it ensures that only the association with the current instance is removed. If the entity has no remaining instances of the custom ability,
            the method removes the entity entry from the internal storage.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.TryRegister(System.Reflection.Assembly,Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute)">
            <summary>
            Tries to register a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>.
            </summary>
            <param name="assembly">The assembly to register <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> from.</param>
            <param name="attribute">The specified <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> was registered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.TryUnregister">
            <summary>
            Tries to unregister a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> was unregistered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.IAbilityBehaviour">
            <summary>
            Represents a marker interface for custom ability behaviors.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.ICustomAbility">
            <summary>
            Represents a marker interface for custom ability.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.ISelectableAbility">
            <summary>
            Represents a marker interface for custom ability that can be selected.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.ISelectableAbility.IsSelectable">
            <summary>
            Gets a value indicating whether the ability can be selected.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.ISelectableAbility.IsSelected">
            <summary>
            Gets a value indicating whether the ability is selected.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ISelectableAbility.Select">
            <summary>
            Selects the ability.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ISelectableAbility.Unselect">
            <summary>
            Unselects the ability.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.Settings.AbilitySettings">
            <summary>
            Represents the base class for player-specific ability behaviors.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.AbilitySettings.Default">
            <summary>
            Gets the default <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.Settings.AbilitySettings"/> values.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.Settings.ActiveAbilitySettings">
            <summary>
            Represents the base class for player-specific ability behaviors.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.ActiveAbilitySettings.UseAbilityInputComponent">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.AbilityInputComponent"/> should be used with this ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.ActiveAbilitySettings.Cooldown">
            <summary>
            Gets or sets the required cooldown before using the ability again.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.ActiveAbilitySettings.ForceCooldownOnAdded">
            <summary>
            Gets or sets a value indicating whether the cooldown should be forced when the ability is added, making it already usable.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.ActiveAbilitySettings.WindupTime">
            <summary>
            Gets or sets the time to wait before the ability is activated.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.ActiveAbilitySettings.Duration">
            <summary>
            Gets or sets the duration of the ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.ActiveAbilitySettings.Activated">
            <summary>
            Gets or sets the message to display when the ability is used.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.ActiveAbilitySettings.CannotBeUsed">
            <summary>
            Gets or sets the message to display when the ability activation is denied regardless any conditions.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.ActiveAbilitySettings.OnCooldown">
            <summary>
            Gets or sets the message to display when the ability activation in on cooldown.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.ActiveAbilitySettings.Expired">
            <summary>
            Gets or sets the message to display when the ability is expired.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.ActiveAbilitySettings.OnReady">
            <summary>
            Gets or sets the message to display when the ability is ready.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.Settings.LevelAbilitySettings">
            <summary>
            Represents the base class for player-specific ability behaviors.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.LevelAbilitySettings.DefaultLevel">
            <summary>
            Gets or sets the default level the ability should start from.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.LevelAbilitySettings.MaxLevel">
            <summary>
            Gets or sets the maxiumum level the ability cannot exceed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.LevelAbilitySettings.PreviousLevel">
            <summary>
            Gets or sets the message to display when the ability returns to a previous level.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.LevelAbilitySettings.NextLevel">
            <summary>
            Gets or sets the message to display when the ability reaches a new level.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.LevelAbilitySettings.MaxLevelReached">
            <summary>
            Gets or sets the message to display when the ability reached the maximum level.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.Settings.UnlockableAbilitySettings">
            <summary>
            Represents the base class for player-specific ability behaviors.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.Settings.UnlockableAbilitySettings.Unlocked">
            <summary>
            Gets or sets the message to display when the ability is unlocked.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1">
            <summary>
            Represents the base class for ability behaviors associated with a specific entity type.
            </summary>
            <typeparam name="TEntity">The type of entity associated with the ability behavior.</typeparam>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.CustomAbility">
            <summary>
            Gets the relative <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.IsActive">
            <summary>
            Gets or sets a value indicating whether the ability is active.
            <para>This value is just affected by duration-based abilities.</para>
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.Settings">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.Settings.AbilitySettings"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.AdjustAdditivePipe">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.ApplyConfig(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.OnBeginPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.OnEndPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.OnUsing">
            <summary>
            Fired every tick when the ability is still active.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.SubscribeEvents_Static">
            <summary>
            Subscribes all the events statically.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1.UnsubscribeEvents_Static">
            <summary>
            Unsubscribes all the events statically.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1">
            <summary>
            Represents the base class for active ability behaviors associated with a specific entity type.
            </summary>
            <typeparam name="TEntity">The type of entity associated with the ability behavior.</typeparam>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.OnActivatingDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before a
            <typeparamref name="TEntity"/> <see cref="T:Exiled.API.Features.Core.GameEntity"/> activates the ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.OnActivatedDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired after a
            <typeparamref name="TEntity"/> <see cref="T:Exiled.API.Features.Core.GameEntity"/> activates the ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.OnExpiredDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired after the ability expires.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.OnReadyDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired after the ability is ready.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.ActiveAbilitySettings">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.Settings.ActiveAbilitySettings"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.LastUsed">
            <summary>
            Gets or sets the last time the ability was used.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.IsReady">
            <summary>
            Gets a value indicating whether the ability is ready.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.RemainingCooldown">
            <summary>
            Gets or sets the remaining cooldown.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.ForceCooldown">
            <summary>
            Forces the cooldown making the ability usable.
            </summary>
            <returns>The new <see cref="P:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.LastUsed"/> value, representing the updated cooldown timestamp.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.ResetCooldown(System.Boolean)">
            <summary>
            Resets the cooldown making the ability not usable.
            </summary>
            <param name="forceExpiration">A value indicating whether the ability should expire, if active.</param>
            <returns>The new <see cref="P:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.LastUsed"/> value, representing the updated cooldown timestamp.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.AdjustAdditivePipe">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.Activate(System.Boolean)">
            <summary>
            Activates the ability.
            </summary>
            <param name="isForced">A value indicating whether the activation should be forced.</param>
            <returns><see langword="true"/> if the ability was activated; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.OnBeginPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.OnEndPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.OnActivating">
            <summary>
            Fired before the ability is activated.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.OnActivated">
            <summary>
            Fired after the ability is activated.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.OnExpired">
            <summary>
            Fired when the ability time's up.
            <para>This method will be fired using duration-based abilities.</para>
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.OnReady">
            <summary>
            Fired when the ability is ready.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.ActiveAbilityBehaviour`1.Execute">
            <summary>
            Executes the ability once, or permanently if behaves passive.
            <para>This method will be fired as soon as the ability is activated.</para>
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1">
            <summary>
            Represents the base class for ability behaviors associated with a specific entity type, providing support for levels.
            </summary>
            <typeparam name="TEntity">The type of entity associated with the ability behavior.</typeparam>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.OnLevelChangedDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired after the ability's level is changed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.OnLevelAddedDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired after the ability's level is added.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.OnLevelRemovedDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired after the ability's level is removed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.OnMaxLevelReachedDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired after the ability's max level has been reached.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.LevelAbilitySettings">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.Settings.LevelAbilitySettings"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.Level">
            <summary>
            Gets or sets the level of the ability.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.AdjustAdditivePipe">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.OnLevelChanged(System.Byte)">
            <summary>
            Fired when the level is changed.
            </summary>
            <param name="newLevel">The new level.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.OnLevelAdded">
            <summary>
            Fired when the ability gains a level.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.OnLevelRemoved">
            <summary>
            Fired when the ability loses a level.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.OnMaxLevelReached">
            <summary>
            Fired when the ability's max level has been reached.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.LevelAbilityBehaviour`1.OnProcessingNextLevel">
            <summary>
            Fired before granting access to a new level.
            <br>It defines the condition to access the next level.</br>
            </summary>
            <returns><see langword="true"/> if the level can change; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.PassiveAbilityBehaviour`1">
            <summary>
            Represents the base class for ability behaviors associated with a specific entity type, providing support for passive usage.
            </summary>
            <typeparam name="TEntity">The type of entity associated with the ability behavior.</typeparam>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomAbilities.UnlockableAbilityBehaviour`1">
            <summary>
            Represents the base class for ability behaviors associated with a specific entity type, providing support for levels and unlocking the ability.
            </summary>
            <typeparam name="TEntity">The type of entity associated with the ability behavior.</typeparam>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.UnlockableAbilityBehaviour`1.UnlockableAbilitySettings">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.Settings.UnlockableAbilitySettings"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomAbilities.UnlockableAbilityBehaviour`1.IsUnlocked">
            <summary>
            Gets or sets a value indicating whether the ability can be used regardless any conditions.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.UnlockableAbilityBehaviour`1.AdjustAdditivePipe">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.UnlockableAbilityBehaviour`1.OnBeginPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.UnlockableAbilityBehaviour`1.OnEndPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.UnlockableAbilityBehaviour`1.OnProcessingUnlockConditions">
            <summary>
            Defines the conditions to be met in order to unlock the ability.
            </summary>
            <returns><see langword="true"/> if the ability can be unlocked; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.UnlockableAbilityBehaviour`1.OnUnlocking(System.Boolean)">
            <summary>
            Fired before the ability has been unlocked.
            </summary>
            <param name="isUnlockable">A value indicating whether the ability should be unlocked.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.UnlockableAbilityBehaviour`1.OnUnlocked">
            <summary>
            Fired after the ability has been unlocked.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.UnlockableAbilityBehaviour`1.DenyActivation">
            <summary>
            Fired after activating the ability which hasn't been unlocked yet.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomAbilities.UnlockableAbilityBehaviour`1.OnActivating">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.ItemAbilities.ActiveAbilityBehaviour">
            <summary>
            Represents the base class for item-specific ability behaviors.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.ActiveAbilityBehaviour.DisposeOnNullOwner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.ActiveAbilityBehaviour.IsReady">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.ActiveAbilityBehaviour.ItemOwner">
            <summary>
            Gets the item's owner.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ActiveAbilityBehaviour.FindOwner">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ActiveAbilityBehaviour.OnActivated">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ActiveAbilityBehaviour.OnExpired">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ActiveAbilityBehaviour.OnReady">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility">
            <summary>
            Represents a base class for custom abilities associated with a specific <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered custom abilities.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Manager">
            <summary>
            Gets all owners and all their respective <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/>'s.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Owners">
            <summary>
            Gets all owners belonging to a <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Get(System.UInt32)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> given the specified id.
            </summary>
            <param name="id">The specified id.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> given the specified name.
            </summary>
            <param name="name">The specified name.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Get(System.Type)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> given the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The specified <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Get(Exiled.API.Features.Items.Item)">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/>'s from a <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
            <param name="entity">The <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/>'s owner.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.TryGet(System.UInt32,Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> given the specified <paramref name="customAbility"/>.
            </summary>
            <param name="id">Theid to look for.</param>
            <param name="customAbility">The found <paramref name="customAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <paramref name="customAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.TryGet(System.String,Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility@)">
            <summary>
            Tries to get a <paramref name="customAbility"/> given a specified name.
            </summary>
            <param name="name">The <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> name to look for.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.TryGet(Exiled.API.Features.Items.Item,System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility}@)">
            <summary>
            Tries to get the item's current abilities.
            </summary>
            <param name="entity">The entity to search on.</param>
            <param name="customAbilities">The found <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/>'s, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.TryGet(Exiled.CustomModules.API.Features.CustomAbilities.IAbilityBehaviour,Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility@)">
            <summary>
            Tries to get the item's current <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/>.
            </summary>
            <param name="abilityBehaviour">The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.IAbilityBehaviour"/> to search for.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.TryGet(System.Type,Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility@)">
            <summary>
            Tries to get the item's current <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/>.
            </summary>
            <param name="type">The type to search for.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Add``1(Exiled.API.Features.Items.Item,``0@)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add``1(`0,``0@)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Add(Exiled.API.Features.Items.Item,System.Type)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.Type)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Add(Exiled.API.Features.Items.Item,System.String)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.String)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Add(Exiled.API.Features.Items.Item,System.UInt32)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.UInt32)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Add(Exiled.API.Features.Items.Item,System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.Collections.Generic.IEnumerable{System.Type})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Add(Exiled.API.Features.Items.Item,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Remove``1(Exiled.API.Features.Items.Item)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove``1(`0)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Remove(Exiled.API.Features.Items.Item,System.Type)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0,System.Type)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Remove(Exiled.API.Features.Items.Item,System.String)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0,System.String)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Remove(Exiled.API.Features.Items.Item,System.UInt32)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0,System.UInt32)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.RemoveAll(Exiled.API.Features.Items.Item)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveAll(`0)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.RemoveRange(Exiled.API.Features.Items.Item,System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveRange(`0,System.Collections.Generic.IEnumerable{System.Type})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.RemoveRange(Exiled.API.Features.Items.Item,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveRange(`0,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.RemoveRange(Exiled.API.Features.Items.Item,System.Collections.Generic.IEnumerable{System.UInt32})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveRange(`0,System.Collections.Generic.IEnumerable{System.UInt32})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Add(Exiled.API.Features.Items.Item)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.ItemAbility.Remove(Exiled.API.Features.Items.Item)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0)"/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.ItemAbilities.LevelAbilityBehaviour">
            <summary>
            Represents the base class for ability behaviors associated with an item, providing support for levels.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.LevelAbilityBehaviour.DisposeOnNullOwner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.LevelAbilityBehaviour.IsReady">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.LevelAbilityBehaviour.ItemOwner">
            <summary>
            Gets the item's owner.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.LevelAbilityBehaviour.FindOwner">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.LevelAbilityBehaviour.OnActivated">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.LevelAbilityBehaviour.OnExpired">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.LevelAbilityBehaviour.OnReady">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.LevelAbilityBehaviour.OnLevelAdded">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.LevelAbilityBehaviour.OnLevelRemoved">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.LevelAbilityBehaviour.OnMaxLevelReached">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.ItemAbilities.PassiveAbilityBehaviour">
            <summary>
            Represents the base class for ability behaviors associated with an item, providing support for passive usage.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.PassiveAbilityBehaviour.DisposeOnNullOwner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.PassiveAbilityBehaviour.ItemOwner">
            <summary>
            Gets the item's owner.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.PassiveAbilityBehaviour.FindOwner">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour">
            <summary>
            Represents the base class for ability behaviors associated with an item, providing support for levels and unlocking the ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour.DisposeOnNullOwner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour.IsReady">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour.ItemOwner">
            <summary>
            Gets the item's owner.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour.FindOwner">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour.OnUnlocked">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour.DenyActivation">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour.OnActivated">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour.OnExpired">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour.OnReady">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour.OnLevelAdded">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour.OnLevelRemoved">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ItemAbilities.UnlockableAbilityBehaviour.OnMaxLevelReached">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.PickupAbilities.PassiveAbilityBehaviour">
            <summary>
            Represents the base class for pickup-specific ability behaviors.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility">
            <summary>
            Represents a base class for custom abilities associated with a specific <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered custom abilities.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Manager">
            <summary>
            Gets all owners and all their respective <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/>'s.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Owners">
            <summary>
            Gets all owners belonging to a <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Get(System.UInt32)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> given the specified id.
            </summary>
            <param name="id">The specified id.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> given the specified name.
            </summary>
            <param name="name">The specified name.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Get(System.Type)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> given the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The specified <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Get(Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/>'s from a <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.
            </summary>
            <param name="entity">The <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/>'s owner.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.TryGet(System.UInt32,Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> given the specified id.
            </summary>
            <param name="id">The id to look for.</param>
            <param name="customAbility">The found <paramref name="customAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <paramref name="customAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.TryGet(System.String,Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility@)">
            <summary>
            Tries to get a <paramref name="customAbility"/> given a specified name.
            </summary>
            <param name="name">The <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> name to look for.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.TryGet(Exiled.API.Features.Pickups.Pickup,System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility}@)">
            <summary>
            Tries to get the pickup's current <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/>'s.
            </summary>
            <param name="entity">The entity to search on.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/>'s, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.TryGet(Exiled.CustomModules.API.Features.CustomAbilities.IAbilityBehaviour,Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility@)">
            <summary>
            Tries to get the pickup's current <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/>.
            </summary>
            <param name="abilityBehaviour">The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.IAbilityBehaviour"/> to search for.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.TryGet(System.Type,Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility@)">
            <summary>
            Tries to get the pickup's current <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/>.
            </summary>
            <param name="type">The type to search for.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Add``1(Exiled.API.Features.Pickups.Pickup,``0@)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add``1(`0,``0@)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Add(Exiled.API.Features.Pickups.Pickup,System.Type)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.Type)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Add(Exiled.API.Features.Pickups.Pickup,System.String)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.String)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Add(Exiled.API.Features.Pickups.Pickup,System.UInt32)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.UInt32)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Add(Exiled.API.Features.Pickups.Pickup,System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.Collections.Generic.IEnumerable{System.Type})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Add(Exiled.API.Features.Pickups.Pickup,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Remove``1(Exiled.API.Features.Pickups.Pickup)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove``1(`0)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Remove(Exiled.API.Features.Pickups.Pickup,System.Type)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0,System.Type)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Remove(Exiled.API.Features.Pickups.Pickup,System.String)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0,System.String)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Remove(Exiled.API.Features.Pickups.Pickup,System.UInt32)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0,System.UInt32)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.RemoveAll(Exiled.API.Features.Pickups.Pickup)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveAll(`0)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.RemoveRange(Exiled.API.Features.Pickups.Pickup,System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveRange(`0,System.Collections.Generic.IEnumerable{System.Type})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.RemoveRange(Exiled.API.Features.Pickups.Pickup,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveRange(`0,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.RemoveRange(Exiled.API.Features.Pickups.Pickup,System.Collections.Generic.IEnumerable{System.UInt32})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveRange(`0,System.Collections.Generic.IEnumerable{System.UInt32})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Add(Exiled.API.Features.Pickups.Pickup)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PickupAbilities.PickupAbility.Remove(Exiled.API.Features.Pickups.Pickup)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0)"/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.PlayerAbilities.ActiveAbilityBehaviour">
            <summary>
            Represents the base class for player-specific ability behaviors.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.ActiveAbilityBehaviour.IsSelectable">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.ActiveAbilityBehaviour.IsSelected">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.ActiveAbilityBehaviour.Select">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.ActiveAbilityBehaviour.Unselect">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.ActiveAbilityBehaviour.FindOwner">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.ActiveAbilityBehaviour.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.ActiveAbilityBehaviour.OnActivated">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.ActiveAbilityBehaviour.OnExpired">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.ActiveAbilityBehaviour.OnReady">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.PlayerAbilities.LevelAbilityBehaviour">
            <summary>
            Represents the base class for ability behaviors associated with a player, providing support for levels.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.LevelAbilityBehaviour.IsSelectable">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.LevelAbilityBehaviour.IsSelected">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.LevelAbilityBehaviour.Select">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.LevelAbilityBehaviour.Unselect">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.LevelAbilityBehaviour.FindOwner">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.LevelAbilityBehaviour.OnActivated">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.LevelAbilityBehaviour.OnExpired">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.LevelAbilityBehaviour.OnReady">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.LevelAbilityBehaviour.OnLevelAdded">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.LevelAbilityBehaviour.OnLevelRemoved">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.LevelAbilityBehaviour.OnMaxLevelReached">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.PlayerAbilities.PassiveAbilityBehaviour">
            <summary>
            Represents the base class for ability behaviors associated with a player, providing support for passive usage.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PassiveAbilityBehaviour.FindOwner">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility">
            <summary>
            Represents a base class for custom abilities associated with a specific <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered custom abilities.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Manager">
            <summary>
            Gets all owners and all their respective <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>'s.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Owners">
            <summary>
            Gets all owners belonging to a <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Get(System.UInt32)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> given the specified id.
            </summary>
            <param name="id">The specified id.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> given the specified name.
            </summary>
            <param name="name">The specified name.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Get(System.Type)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> given the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The specified <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Get(Exiled.API.Features.Player)">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>'s from a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="entity">The <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>'s owner.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.TryGet(System.UInt32,Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> given the specified <paramref name="customAbility"/>.
            </summary>
            <param name="customAbilityType">The <see cref="T:System.Object"/> to look for.</param>
            <param name="customAbility">The found <paramref name="customAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <paramref name="customAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.TryGet(System.String,Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility@)">
            <summary>
            Tries to get a <paramref name="customAbility"/> given a specified name.
            </summary>
            <param name="name">The <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> name to look for.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.TryGet(Exiled.API.Features.Player,System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility}@)">
            <summary>
            Tries to get the player's current <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>'s.
            </summary>
            <param name="entity">The entity to search on.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>'s, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.TryGet(Exiled.CustomModules.API.Features.CustomAbilities.IAbilityBehaviour,Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility@)">
            <summary>
            Tries to get the player's current <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>.
            </summary>
            <param name="abilityBehaviour">The <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.IAbilityBehaviour"/> to search for.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.TryGet(System.Type,Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility@)">
            <summary>
            Tries to get the player's current <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>.
            </summary>
            <param name="type">The type to search for.</param>
            <param name="customAbility">The found <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Add``1(Exiled.API.Features.Player,``0@)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add``1(`0,``0@)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Add(Exiled.API.Features.Player,System.Type)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.Type)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Add(Exiled.API.Features.Player,System.String)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.String)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Add(Exiled.API.Features.Player,System.UInt32)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.UInt32)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Add(Exiled.API.Features.Player,System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.Collections.Generic.IEnumerable{System.Type})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Add(Exiled.API.Features.Player,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Remove``1(Exiled.API.Features.Player)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove``1(`0)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Remove(Exiled.API.Features.Player,System.Type)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0,System.Type)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Remove(Exiled.API.Features.Player,System.String)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0,System.String)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Remove(Exiled.API.Features.Player,System.UInt32)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0,System.String)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.RemoveAll(Exiled.API.Features.Player)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveAll(`0)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.RemoveRange(Exiled.API.Features.Player,System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveRange(`0,System.Collections.Generic.IEnumerable{System.Type})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.RemoveRange(Exiled.API.Features.Player,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.RemoveRange(`0,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Add(Exiled.API.Features.Player)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Add(`0)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility.Remove(Exiled.API.Features.Player)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1.Remove(`0)"/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.PlayerAbilities.Scp079AbilityBehaviour">
            <summary>
            Represents the base class for SCP-079 specific ability behaviors.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.Scp079AbilityBehaviour.Scp079">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Roles.Scp079Role"/> of the owner.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.Scp079AbilityBehaviour.Tier">
            <summary>
            Gets or sets the required tier to unlock the ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.Scp079AbilityBehaviour.GainedExperience">
            <summary>
            Gets or sets the gained experience after using the ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.Scp079AbilityBehaviour.RequiredEnergy">
            <summary>
            Gets or sets the required energy to use the ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.Scp079AbilityBehaviour.AllowedZones">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.ZoneType"/> containing all the zones in which SCP-079 can use the ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.Scp079AbilityBehaviour.OnGainedExperienceDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before SCP-079 gains experience.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.Scp079AbilityBehaviour.FindOwner">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.Scp079AbilityBehaviour.OnActivating">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.Scp079AbilityBehaviour.OnActivated">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.Scp079AbilityBehaviour.OnReady">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.Scp079AbilityBehaviour.OnGainingExperience">
            <summary>
            Fired when the owner gains experience due to the activation of the ability.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour">
            <summary>
            Represents the base class for ability behaviors associated with a player, providing support for levels and unlocking the ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.IsSelectable">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.IsSelected">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.Select">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.Unselect">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.FindOwner">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.OnUnlocked">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.DenyActivation">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.OnActivated">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.OnExpired">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.OnReady">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.OnLevelAdded">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.OnLevelRemoved">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.PlayerAbilities.UnlockableAbilityBehaviour.OnMaxLevelReached">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape">
            <summary>
            Abstract class facilitating the seamless management of escaping behavior within the game environment.
            </summary>
            <remarks>
            The <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> class serves as a foundational framework for implementing and controlling various escaping mechanisms.
            <para>
            As an implementation of <see cref="T:Exiled.API.Features.Core.Interfaces.IAdditiveBehaviour"/>, <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> seamlessly integrates into existing systems, allowing developers to extend and enhance escape-related functionalities.
            <br/>The class also implements <see cref="T:System.IEquatable`1"/> and <see cref="T:System.IEquatable`1"/>, enabling straightforward comparisons for equality checks.
            </para>
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> which contains all registered <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>'s.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.AllScenarios">
            <summary>
            Gets all existing <see cref="T:Exiled.API.Features.Hint"/>'s to be displayed based on the relative <see cref="T:Exiled.CustomModules.API.Enums.UUEscapeScenarioType"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Manager">
            <summary>
            Gets all players and their respective <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Config">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Name">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>'s name.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Id">
            <summary>
            Gets or sets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>'s id.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> is enabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.BehaviourComponent">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>'s <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Scenarios">
            <summary>
            Gets or sets all <see cref="T:Exiled.API.Features.Hint"/>'s to be displayed based on the relative <see cref="T:Exiled.CustomModules.API.Enums.UUEscapeScenarioType"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Settings">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings"/> containing all escape settings.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Get(System.Object)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> based on the provided id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomEscapeType"/>.
            </summary>
            <param name="id">The id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomEscapeType"/> of the custom escape.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> with the specified id, or <see langword="null"/> if no escape is found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Get(System.UInt32)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> given the specified <see cref="P:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Id"/>.
            </summary>
            <param name="id">The specified id.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> given the specified name.
            </summary>
            <param name="name">The specified name.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Get(System.Type)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> given the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The specified <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Get(Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> given the specified <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour"/>.
            </summary>
            <param name="escapeBuilder">The specified <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour"/>.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Get(Exiled.API.Features.Player)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> from a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> owner.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.TryGet(System.Object,Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape@)">
            <summary>
            Attempts to retrieve a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> based on the provided id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomEscapeType"/>.
            </summary>
            <param name="id">The id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomEscapeType"/> of the custom escape.</param>
            <param name="customEscape">When this method returns, contains the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> associated with the specified id, if the id was found; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.TryGet(System.UInt32,Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> given the specified <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>.
            </summary>
            <param name="id">The id to look for.</param>
            <param name="customEscape">The found <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.TryGet(System.String,Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> given a specified name.
            </summary>
            <param name="name">The <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> name to look for.</param>
            <param name="customEscape">The found <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.TryGet(Exiled.API.Features.Player,Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape@)">
            <summary>
            Tries to get the player's current <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to search on.</param>
            <param name="customEscape">The found <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.TryGet(System.Type,Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape@)">
            <summary>
            Tries to get the player's current <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to search for.</param>
            <param name="customEscape">The found <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.EnableAll">
            <summary>
            Enables all the custom escapes present in the assembly.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.EnableAll(System.Reflection.Assembly)">
            <summary>
            Enables all the custom escapes present in the assembly.
            </summary>
            <param name="assembly">The assembly to enable the escapes from.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.DisableAll">
            <summary>
            Disables all the custom escapes present in the assembly.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Attach(Exiled.API.Features.Player,System.UInt32)">
            <summary>
            Attaches a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> with the specified <paramref name="id"/> to the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to attach the escape rules to.</param>
            <param name="id">The unique identifier of the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to attach.</param>
            <remarks>
            This method attempts to attach a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to the provided <paramref name="player"/> based on the specified <paramref name="id"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Attach(Exiled.API.Features.Player,System.String)">
            <summary>
            Attaches a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> with the specified <paramref name="name"/> to the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to attach the escape rules to.</param>
            <param name="name">The name of the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to attach.</param>
            <remarks>
            This method attempts to attach a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to the provided <paramref name="player"/> based on the specified <paramref name="name"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Attach(Exiled.API.Features.Player,System.Type)">
            <summary>
            Attaches a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> with the specified <paramref name="type"/> to the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to attach the escape rules to.</param>
            <param name="type">The <see cref="T:System.Type"/> of the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to attach.</param>
            <remarks>
            This method attempts to attach a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to the provided <paramref name="player"/> based on the specified <paramref name="type"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Attach``1(Exiled.API.Features.Player)">
            <summary>
            Attaches a <typeparamref name="T"/>-derived <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to attach.</typeparam>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to attach the escape rules to.</param>
            <remarks>
            This method attempts to attach a <typeparamref name="T"/>-derived <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to the provided <paramref name="player"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Detach(Exiled.API.Features.Player,System.UInt32)">
            <summary>
            Detaches a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> with the specified <paramref name="id"/> from the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to detach the escape rules from.</param>
            <param name="id">The unique identifier of the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to detach.</param>
            <remarks>
            This method attempts to detach a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> with the provided <paramref name="id"/> from the specified <paramref name="player"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Detach(Exiled.API.Features.Player,System.String)">
            <summary>
            Detaches a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> with the specified <paramref name="name"/> from the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to detach the escape rules from.</param>
            <param name="name">The name of the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to detach.</param>
            <remarks>
            This method attempts to detach a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> with the provided <paramref name="name"/> from the specified <paramref name="player"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Detach(Exiled.API.Features.Player,System.Type)">
            <summary>
            Detaches a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> with the specified <paramref name="type"/> from the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to detach the escape rules from.</param>
            <param name="type">The <see cref="T:System.Type"/> of the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to detach.</param>
            <remarks>
            This method attempts to detach a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> with the provided <paramref name="type"/> from the specified <paramref name="player"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Detach``1(Exiled.API.Features.Player)">
            <summary>
            Detaches a <typeparamref name="T"/>-derived <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> from the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to detach.</typeparam>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to detach the escape rules from.</param>
            <remarks>
            This method attempts to detach a <typeparamref name="T"/>-derived <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> from the specified <paramref name="player"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Attach(Exiled.API.Features.Player)">
            <summary>
            Attaches a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to attach the escape rules to.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.Detach(Exiled.API.Features.Player)">
            <summary>
            Detaches a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> to the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to detach the escape rules from.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.TryRegister(System.Reflection.Assembly,Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute)">
            <summary>
            Tries to register a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>.
            </summary>
            <param name="assembly">The assembly to register <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> from..</param>
            <param name="attribute">The specified <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> was registered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape.TryUnregister">
            <summary>
            Tries to unregister a <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/> was unregistered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour">
            <summary>
            Represents the base class for custom escape behaviors.
            </summary>
            <remarks>
            This class extends <see cref="T:Exiled.CustomModules.API.Features.ModuleBehaviour`1"/> and implements <see cref="T:Exiled.API.Features.Core.Interfaces.IAdditiveSettingsCollection`1"/>.
            <br/>It serves as the foundation for creating custom escape behaviors associated with in-game player actions.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.CustomEscape">
            <summary>
            Gets the relative <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.Settings">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings"/> containing all escape's settings.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.CurrentScenario">
            <summary>
            Gets the current escape scenario.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.EscapingDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> handling all bound delegates to be fired before escaping.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.EscapedDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> handling all bound delegates to be fired after escaping.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.AdjustAdditivePipe">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.ApplyConfig(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.OnEndPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.CalculateEscapeScenario">
            <summary>
            Calculates the escape scenario.
            <para>An <see langword="override"/> is required in order to make it work.</para>
            </summary>
            <returns>The corresponding <see cref="T:Exiled.CustomModules.API.Enums.UUEscapeScenarioType"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.OnEscaping(Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs)">
            <summary>
            Fired before the player escapes.
            </summary>
            <param name="ev">The <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour.OnEscaped(Exiled.API.Features.Player)">
            <summary>
            Fired after the player escapes.
            </summary>
            <param name="player">The player who escaped.</param>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings">
            <summary>
            A tool to easily setup escapes.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.DefaultMaxDistanceTolerance">
            <summary>
            The default distance tolerance value.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.DefaultPosition">
            <summary>
            Gets the default escape position.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.Default">
            <summary>
            Gets the default <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings"/> values.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.#ctor(PlayerRoles.RoleTypeId,UnityEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings"/> class.
            </summary>
            <param name="role"><inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.Role"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.Position"/></param>
            <param name="distanceThreshold"><inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.DistanceThreshold"/></param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.#ctor(System.UInt32,UnityEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings"/> class.
            </summary>
            <param name="customRole"><inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.CustomRole"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.Position"/></param>
            <param name="distanceThreshold"><inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.DistanceThreshold"/></param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.#ctor(System.Boolean,PlayerRoles.RoleTypeId,System.UInt32,UnityEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings"/> class.
            </summary>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.IsAllowed"/></param>
            <param name="role"><inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.Role"/></param>
            <param name="customRole"><inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.CustomRole"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.Position"/></param>
            <param name="distanceThreshold"><inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.DistanceThreshold"/></param>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.IsAllowed">
            <summary>
            Gets or sets a value indicating whether escaping is allowed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.Role">
            <summary>
            Gets or sets the role to be given when escaping.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.CustomRole">
            <summary>
            Gets or sets the custom role to be given when escaping.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.Position">
            <summary>
            Gets or sets the escape position.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings.DistanceThreshold">
            <summary>
            Gets or sets the maximum allowable distance for applying the specified settings.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape`1">
            <inheritdoc/>
            <typeparam name="T">The <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour"/> type.</typeparam>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape`1.BehaviourComponent">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode">
            <summary>
            Represents a custom game mode in the system, derived from <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> and implementing <see cref="T:Exiled.API.Features.Core.Interfaces.IAdditiveBehaviours"/>.
            This class serves as a base for creating custom game modes within the system.
            </summary>
            <remarks>
            <para>
            Custom game modes extend functionality through inheritance from this base class and can implement additional behaviors
            by also implementing the <see cref="T:Exiled.API.Features.Core.Interfaces.IAdditiveBehaviours"/> interface.
            </para>
            <para>
            Game modes encapsulate specific rules, mechanics, and behaviors that define the gameplay experience within the system.
            </para>
            <para>
            Additionally, there are two important classes associated with custom game modes:
            <list type="bullet">
                <item>
                    <term><see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.GameState"/></term>
                    <description>
                    Represents the state of the game on the server. It defines rules and conditions specific to the custom game mode during the round,
                    including win conditions and other relevant settings.
                    <br/>
                    The <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.GameState"/> class is used to encapsulate the current state of the game, such as in-progress rounds,
                    outcomes, or any other state-related information relevant to the custom game mode.
                    <br/>
                    Classes derived from <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.GameState"/> are responsible for defining and enforcing the rules and conditions of the custom game mode on the server.
                    </description>
                </item>
                <item>
                    <term><see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/></term>
                    <description>
                    Represents the state of an individual player within the custom game mode.
                    <br/>
                    The <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> class manages the behavior and interactions of a single player within the custom game mode. It governs the specific actions of a single player.
                    <br/>
                    It is responsible for handling player-specific actions and responses, providing a way to customize the experience for each player.
                    </description>
                </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/>'s.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.Config">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.Name">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.Id">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.BehaviourComponents">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.Settings">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.CanStartAuto">
            <summary>
            Gets a value indicating whether the game mode can start automatically based on the configured probability, if automatic.
            </summary>
            <returns><see langword="true"/> if the game mode can start automatically; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.GameState">
            <summary>
            Gets the type of the game state.
            </summary>
            <returns>The type of the game state if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.PlayerStates">
            <summary>
            Gets the types of the player states.
            </summary>
            <returns>The types of the player states if found; otherwise, empty.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.Get(System.Func{Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode,System.Boolean})">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> instances based on the predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>All <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> instances matching the predicate.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.Get(System.Object)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> based on the provided id or <see cref="T:Exiled.CustomModules.API.Enums.UUGameModeType"/>.
            </summary>
            <param name="id">The id or <see cref="T:Exiled.CustomModules.API.Enums.UUGameModeType"/> of the custom game mode.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> with the specified id, or <see langword="null"/> if no game mode is found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.Get(System.UInt32)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> given the specified <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.Id"/>.
            </summary>
            <param name="id">The specified id.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> given the specified name.
            </summary>
            <param name="name">The specified name.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.Get(System.Type)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> given the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The specified <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.Get(Exiled.CustomModules.API.Features.CustomGameModes.GameState)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> given the specified <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.GameState"/>.
            </summary>
            <param name="gameState">The specified <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.GameState"/>.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.Get(Exiled.CustomModules.API.Features.CustomGameModes.PlayerState)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> given the specified <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/>.
            </summary>
            <param name="playerState">The specified <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/>.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.TryGet(System.Object,Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode@)">
            <summary>
            Attempts to retrieve a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> based on the provided id or <see cref="T:Exiled.CustomModules.API.Enums.UUGameModeType"/>.
            </summary>
            <param name="id">The id or <see cref="T:Exiled.CustomModules.API.Enums.UUGameModeType"/> of the custom game mode.</param>
            <param name="customGameMode">When this method returns, contains the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> associated with the specified id, if the id was found; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.TryGet(System.UInt32,Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> given the specified <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/>.
            </summary>
            <param name="id">The id to look for.</param>
            <param name="customGameMode">The found <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.TryGet(System.String,Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> given a specified name.
            </summary>
            <param name="name">The <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> name to look for.</param>
            <param name="customGameMode">The found <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.TryGet(System.Type,Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode@)">
            <summary>
            Tries to get the player's current <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to search for.</param>
            <param name="customGameMode">The found <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.EnableAll">
            <summary>
            Enables all the custom game modes present in the assembly.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.EnableAll(System.Reflection.Assembly)">
            <summary>
            Enables all the custom game modes present in the assembly.
            </summary>
            <param name="assembly">The assembly to enable the game modes from.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.DisableAll">
            <summary>
            Disables all the custom game modes present in the assembly.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.TryRegister(System.Reflection.Assembly,Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute)">
            <summary>
            Tries to register a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/>.
            </summary>
            <param name="assembly">The assembly to register <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> from.</param>
            <param name="attribute">The specified <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> was registered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode.TryUnregister">
            <summary>
            Tries to unregister a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/>.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/> was unregistered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings">
            <summary>
            A tool to easily setup game modes.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.Automatic">
            <summary>
            Gets or sets a value indicating whether the game mode operates in automatic mode.
            </summary>
            <remarks>
            In automatic mode, the behavior of the game mode is managed automatically by the <see cref="T:Exiled.CustomModules.API.Features.World"/>.
            <br/>
            The game mode will start automatically if the specified probability condition is met and the minimum player requirement (<see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.MinimumPlayers"/>) is satisfied.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.AutomaticProbability">
            <summary>
            Gets or sets the probability condition for automatic game mode activation.
            </summary>
            <remarks>
            This property specifies the probability condition that determines whether the game mode will start automatically.
            <br/>
            If the specified probability condition is met and the minimum player requirement (<see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.MinimumPlayers"/>) is satisfied, the game mode will activate automatically.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.MinimumPlayers">
            <summary>
            Gets or sets the minimum amount of players to start the game mode.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.MaximumPlayers">
            <summary>
            Gets or sets the maximum allowed amount of players managed by the game mode.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.RejectExceedingPlayers">
            <summary>
            Gets or sets a value indicating whether the exceeding players should be rejected.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.RejectExceedingMessage">
            <summary>
            Gets or sets the message to be displayed when a player is rejected due to exceeding amount of players.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.IsRespawnEnabled">
            <summary>
            Gets or sets a value indicating whether the players can respawn.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.RespawnTime">
            <summary>
            Gets or sets the respawn time for individual players.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.IsTeamRespawnEnabled">
            <summary>
            Gets or sets a value indicating whether teams can regularly respawn.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.TeamRespawnTime">
            <summary>
            Gets or sets the respawn time for individual teams.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.UseCustomEndingConditions">
            <summary>
            Gets or sets a value indicating whether custom ending conditions should be used over predefined conditions.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.RestartRoundOnEnd">
            <summary>
            Gets or sets a value indicating whether server should be restarted when the game mode ends.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.RestartWindupTime">
            <summary>
            Gets or sets the amount of time to await before restarting the server.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.LockedZones">
            <summary>
            Gets or sets a <see cref="T:Exiled.API.Enums.ZoneType"/>[] containing all zones that should be permanently locked.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.LockedDoors">
            <summary>
            Gets or sets a <see cref="T:Exiled.API.Enums.DoorType"/>[] containing all doors that should be permanently locked.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.LockedElevators">
            <summary>
            Gets or sets a <see cref="T:Exiled.API.Enums.ElevatorType"/>[] containing all elevators that should be permanently locked.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.IsDecontaminationEnabled">
            <summary>
            Gets or sets a value indicating whether the decontamination should be enabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.IsWarheadEnabled">
            <summary>
            Gets or sets a value indicating whether the Alpha Warhead is enabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.IsWarheadInteractable">
            <summary>
            Gets or sets a value indicating whether the Alpha Warhead interactions are allowed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.AutoWarheadTime">
            <summary>
            Gets or sets the amount of time, expressed in seconds, after which the Alpha Warhead will be automatically started.
            <para/>
            <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.IsWarheadEnabled"/> must be set to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.SpawnableRoles">
            <summary>
            Gets or sets a <see cref="T:PlayerRoles.RoleTypeId"/>[] containing all spawnable roles.
            <para/>
            If not empty, all undefined roles won't be able to spawn.
            <br/>
            It's highly recommended to not use it along with <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.NonSpawnableRoles"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.SpawnableCustomRoles">
            <summary>
            Gets or sets a <see cref="T:Exiled.CustomModules.API.Enums.UUCustomRoleType"/>[] containing all spawnable custom roles.
            <para/>
            If not empty, all undefined custom roles won't be able to spawn.
            <br/>
            It's highly recommended to not use it along with <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.NonSpawnableCustomRoles"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.SpawnableTeams">
            <summary>
            Gets or sets a <see cref="T:Respawning.SpawnableTeamType"/>[] containing all spawnable teams.
            <para/>
            If not empty, all undefined teams won't be able to spawn.
            <br/>
            It's highly recommended to not use it along with <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.NonSpawnableTeams"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.SpawnableCustomTeams">
            <summary>
            Gets or sets a <see cref="T:Exiled.CustomModules.API.Enums.UUCustomTeamType"/>[] containing all spawnable custom teams.
            <para/>
            If not empty, all undefined custom teams won't be able to spawn.
            <br/>
            It's highly recommended to not use it along with <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.NonSpawnableCustomTeams"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.NonSpawnableRoles">
            <summary>
            Gets or sets a <see cref="T:PlayerRoles.RoleTypeId"/>[] containing all non spawnable roles.
            <para/>
            If not empty, all undefined roles will be able to spawn.
            <br/>
            It's highly recommended to not use it along with <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.SpawnableRoles"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.NonSpawnableCustomRoles">
            <summary>
            Gets or sets a <see cref="T:Exiled.CustomModules.API.Enums.UUCustomRoleType"/>[] containing all non spawnable custom roles.
            <para/>
            If not empty, all undefined custom roles will be able to spawn.
            <br/>
            It's highly recommended to not use it along with <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.SpawnableCustomRoles"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.NonSpawnableTeams">
            <summary>
            Gets or sets a <see cref="T:Exiled.CustomModules.API.Enums.UUCustomTeamType"/>[] containing all non spawnable custom teams.
            <para/>
            If not empty, all undefined teams will be able to spawn.
            <br/>
            It's highly recommended to not use it along with <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.SpawnableTeams"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.NonSpawnableCustomTeams">
            <summary>
            Gets or sets a <see cref="T:Exiled.CustomModules.API.Enums.UUCustomTeamType"/>[] containing all non spawnable custom teams.
            <para/>
            If not empty, all undefined custom teams will be able to spawn.
            <br/>
            It's highly recommended to not use it along with <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameModeSettings.SpawnableCustomTeams"/>.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomGameModes.GameState">
            <summary>
            Represents the state of the game on the server within the custom game mode, derived from <see cref="T:Exiled.API.Features.Core.EActor"/> and implementing <see cref="T:Exiled.API.Features.Core.Interfaces.IAdditiveSettings`1"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.GameState"/> class encapsulates the current state of the game during rounds within the custom game mode.
            </para>
            <para>
            It serves as the foundation for defining and enforcing rules, conditions, and settings specific to the custom game mode on the server.
            </para>
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameState.CustomGameMode">
            <summary>
            Gets the relative <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameState.PlayerStateComponent">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> associated to the current <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameState.CustomGameMode"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameState.Settings">
            <summary>
            Gets or sets the settings associated with the custom game mode.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameState.Config">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.GameState"/>'s config.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameState.PlayerStates">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameState.MatchState">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Enums.UEMatchState"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameState.ElapsedTime">
            <summary>
            Gets the time elapsed from the start of the round.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameState.CanBeEnded">
            <summary>
            Gets a value indicating whether the game state can be ended.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.GameState.PlayerCount">
            <summary>
            Gets the current player count.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.GameState.AdjustAdditivePipe">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.GameState.AddPlayerState(Exiled.CustomModules.API.Features.CustomGameModes.PlayerState)">
            <summary>
            Adds a new <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> to <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameState.PlayerStates"/>.
            </summary>
            <param name="playerState">The <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> to add.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.GameState.RemovePlayerState(Exiled.CustomModules.API.Features.CustomGameModes.PlayerState)">
            <summary>
            Removes a new <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> to <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.GameState.PlayerStates"/>.
            </summary>
            <param name="playerState">The <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> to remove.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.GameState.Start(System.Boolean)">
            <summary>
            Starts the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.GameState"/>.
            </summary>
            <param name="isForced">A value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.GameState"/> should be started regardless any conditions.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.GameState.End(System.Boolean)">
            <summary>
            Ends the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.GameState"/>.
            </summary>
            <param name="isForced">A value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.GameState"/> should be ended regardless any conditions.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.GameState.EvaluateEndingConditions">
            <summary>
            Defines and evaluates the ending conditions.
            </summary>
            <returns><see langword="true"/> if the current game state matches the defined ending conditions; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.GameState.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.GameState.OnBeginPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.GameState.OnEndPlay">
            <inheritdoc />
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.GameState.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.GameState.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState">
            <summary>
            Represents the state of an individual player within the custom game mode, derived from <see cref="T:Exiled.CustomModules.API.Features.ModuleBehaviour`1"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> class manages the behavior and interactions of a single player within the custom game mode.
            </para>
            <para>
            It serves as a base class for defining player-specific actions and responses within the context of the custom game mode.
            </para>
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.DeployedDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all delegates to be fired after the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> has been deployed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.ActivatedDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all delegates to be fired after the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> has been activated.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.DeactivatedDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all delegates to be fired after the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> has been deactivated.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.IsActive">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> can behave regularly.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.IsRespawnable">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> is respawnable.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.RespawnTime">
            <summary>
            Gets the respawn time for individual players.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.Score">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> score.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.LastDeath">
            <summary>
            Gets or sets the last time the player died.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.CanRespawn">
            <summary>
            Gets a value indicating whether the player is ready to respawn.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.RemainingRespawnTime">
            <summary>
            Gets or sets the remaining respawn time.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.ForceRespawn">
            <summary>
            Forces the respawn procedure.
            </summary>
            <returns>The new <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.LastDeath"/> value, representing the updated death timestamp.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.ResetRespawn">
            <summary>
            Resets the respawn procedure.
            </summary>
            <returns>The new <see cref="P:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.LastDeath"/> value, representing the updated death timestamp.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.Deploy">
            <summary>
            Deploys the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> in game.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.IncreaseScore(System.Int32)">
            <summary>
            Increases the score of the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/>.
            </summary>
            <param name="score">The amount of score to be increased.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.DecreaseScore(System.Int32)">
            <summary>
            Decreases the score of the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/>.
            </summary>
            <param name="score">The amount of score to be decreased.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.OnEndPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.OnDeployed">
            <summary>
            Fired after a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> has been deployed.
            <para/>
            It defines the initial state of the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.OnDeployed_Active">
            <summary>
            Fired after a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> has been deployed and is active.
            <para/>
            It defines the initial state of the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.OnDeployed_Inactive">
            <summary>
            Fired after a <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/> has been deployed and is not active.
            <para/>
            It defines the initial state of the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState.Respawn">
            <summary>
            Respawns the owner of the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.PlayerState"/>.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem">
            <summary>
            A class to easily manage item behavior.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TrackedBehaviours">
            <summary>
            Gets all tracked behaviours.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> which contains all registered <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>'s.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.ItemManager">
            <summary>
            Gets all Items and their respective <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.PickupManager">
            <summary>
            Gets all Pickups and their respective <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.CustomPickups">
            <summary>
            Gets all pickups belonging to a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.CustomItems">
            <summary>
            Gets all items belonging to a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Config">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.BehaviourComponent">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>'s <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Name">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>'s name.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Id">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>'s id.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> is enabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Description">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>'s description.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.ItemType">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>'s <see cref="T:ItemType"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.ItemCategory">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>'s <see cref="T:ItemCategory"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Settings">
            <summary>
            Gets or sets the <see cref="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Settings"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.IsRegistered">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> is registered.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Pickups">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/> containing all pickup owning this <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Items">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Items.Item"/> containing all item owning this <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Get(System.Object)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> based on the provided id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomItemType"/>.
            </summary>
            <param name="id">The id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomItemType"/> of the custom item.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> with the specified id, or <see langword="null"/> if no item is found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Get(System.UInt32)">
            <summary>
            Retrieves a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance based on the specified custom item id.
            </summary>
            <param name="id">The custom item id to retrieve.</param>
            <returns>The retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance if found and enabled; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Get(System.String)">
            <summary>
            Retrieves a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance based on the specified item name.
            </summary>
            <param name="name">The name of the custom item to retrieve.</param>
            <returns>The retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Get(System.Type)">
            <summary>
            Retrieves a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance based on the specified type.
            </summary>
            <param name="type">The type to retrieve the custom item for.</param>
            <returns>The retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance if found and enabled; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Get(Exiled.API.Features.Items.Item)">
            <summary>
            Retrieves a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance based on the specified <see cref="T:Exiled.API.Features.Items.Item"/> instance.
            </summary>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> instance to retrieve the custom item from.</param>
            <returns>The retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Get(Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Retrieves a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance based on the specified <see cref="T:Exiled.API.Features.Pickups.Pickup"/> instance.
            </summary>
            <param name="item">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> instance to retrieve the custom item from.</param>
            <returns>The retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGet(System.Object,Exiled.CustomModules.API.Features.CustomItems.CustomItem@)">
            <summary>
            Attempts to retrieve a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> based on the provided id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomItemType"/>.
            </summary>
            <param name="id">The id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomItemType"/> of the custom item.</param>
            <param name="customItem">When this method returns, contains the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> associated with the specified id, if the id was found; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGet(System.UInt32,Exiled.CustomModules.API.Features.CustomItems.CustomItem@)">
            <summary>
            Tries to retrieve a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance based on the specified custom item id.
            </summary>
            <param name="id">The custom item id to retrieve.</param>
            <param name="customItem">The retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance, if successful; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if the retrieval is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGet(System.String,Exiled.CustomModules.API.Features.CustomItems.CustomItem@)">
            <summary>
            Tries to retrieve a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance based on the specified item name.
            </summary>
            <param name="name">The name of the custom item to retrieve.</param>
            <param name="customItem">The retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance, if successful; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if the retrieval is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGet(Exiled.API.Features.Items.Item,Exiled.CustomModules.API.Features.CustomItems.CustomItem@)">
            <summary>
            Tries to retrieve a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance based on the specified <see cref="T:Exiled.API.Features.Items.Item"/> instance.
            </summary>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> instance to retrieve the custom item for.</param>
            <param name="customItem">The retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance, if successful; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if the retrieval is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGet(Exiled.API.Features.Pickups.Pickup,Exiled.CustomModules.API.Features.CustomItems.CustomItem@)">
            <summary>
            Tries to retrieve a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance based on the specified <see cref="T:Exiled.API.Features.Pickups.Pickup"/> instance.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> instance to retrieve the custom item for.</param>
            <param name="customItem">The retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance, if successful; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if the retrieval is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGet(System.Type,Exiled.CustomModules.API.Features.CustomItems.CustomItem@)">
            <summary>
            Tries to retrieve a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance based on the specified type.
            </summary>
            <param name="type">The type to retrieve the custom item for.</param>
            <param name="customItem">The retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> instance, if successful; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if the retrieval is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TrySpawn(UnityEngine.Vector3,Exiled.CustomModules.API.Features.CustomItems.CustomItem,Exiled.API.Features.Pickups.Pickup@)">
            <summary>
            Tries to spawn a custom item at the specified position.
            </summary>
            <param name="position">The position where the item should be spawned.</param>
            <param name="customItem">The custom item to spawn.</param>
            <param name="pickup">The spawned pickup, if successful; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if the spawn is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TrySpawn(UnityEngine.Vector3,System.UInt32,Exiled.API.Features.Pickups.Pickup@)">
            <summary>
            Tries to spawn a custom item at the specified position using the specified custom item id.
            </summary>
            <param name="position">The position where the item should be spawned.</param>
            <param name="id">The custom item id to spawn.</param>
            <param name="pickup">The spawned pickup, if successful; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if the spawn is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TrySpawn(UnityEngine.Vector3,System.String,Exiled.API.Features.Pickups.Pickup@)">
            <summary>
            Tries to spawn a custom item at the specified position using the specified item name.
            </summary>
            <param name="position">The position where the item should be spawned.</param>
            <param name="name">The name of the custom item to spawn.</param>
            <param name="pickup">The spawned pickup, if successful; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if the spawn is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGive(Exiled.API.Features.Player,System.String,System.Boolean)">
            <summary>
            Tries to give a custom item to a player using the specified item name.
            </summary>
            <param name="player">The player to give the item to.</param>
            <param name="name">The name of the custom item to give.</param>
            <param name="displayMessage">Determines whether to display a message to the player.</param>
            <returns><see langword="true"/> if the give is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGive(Exiled.API.Features.Player,System.UInt32,System.Boolean)">
            <summary>
            Tries to give a custom item to a player using the specified item ID.
            </summary>
            <param name="player">The player to give the item to.</param>
            <param name="id">The ID of the custom item to give.</param>
            <param name="displayMessage">Determines whether to display a message to the player.</param>
            <returns><see langword="true"/> if the give is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryGive(Exiled.API.Features.Player,System.Type,System.Boolean)">
            <summary>
            Tries to give a custom item to a player using the specified item type.
            </summary>
            <param name="player">The player to give the item to.</param>
            <param name="type">The type of the custom item to give.</param>
            <param name="displayMessage">Determines whether to display a message to the player.</param>
            <returns><see langword="true"/> if the give is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.EnableAll">
            <summary>
            Enables all the custom items present in the assembly.
            </summary>
            <remarks>
            This method dynamically enables all custom items found in the calling assembly. Custom items
            must be marked with the <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/> to be considered for enabling.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.EnableAll(System.Reflection.Assembly)">
            <summary>
            Enables all the custom items present in the assembly.
            </summary>
            <param name="assembly">The assembly to enable the items from.</param>
            <remarks>
            This method dynamically enables all custom items found in the calling assembly. Custom items
            must be marked with the <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/> to be considered for enabling.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.DisableAll">
            <summary>
            Disables all the custom items present in the assembly.
            </summary>
            <remarks>
            This method dynamically disables all custom items found in the calling assembly that were
            previously registered.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Spawn(System.Single,System.Single,System.Single)">
            <summary>
            Spawns the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> in a specific location.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> wrapper of the spawned <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Spawn(System.Single,System.Single,System.Single,Exiled.API.Features.Items.Item)">
            <summary>
            Spawns a <see cref="T:Exiled.API.Features.Items.Item"/> as a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> in a specific location.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
            <param name="item">The <see cref="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.ItemType"/> to be spawned as a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> wrapper of the spawned <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Spawn(Exiled.API.Features.Player,Exiled.API.Features.Player)">
            <summary>
            Spawns the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> where a specific <see cref="T:Exiled.API.Features.Player"/> is, and optionally sets the previous owner.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> position where the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> will be spawned.</param>
            <param name="previousOwner">The previous owner of the pickup, can be null.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> of the spawned <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Spawn(Exiled.API.Features.Player,Exiled.API.Features.Items.Item,Exiled.API.Features.Player)">
            <summary>
            Spawns an <see cref="T:Exiled.API.Features.Items.Item"/> as a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> where a specific <see cref="T:Exiled.API.Features.Player"/> is, and optionally sets the previous owner.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> position where the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> will be spawned.</param>
            <param name="item">The <see cref="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.ItemType"/> to be spawned as a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.</param>
            <param name="previousOwner">The previous owner of the pickup, can be null.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> of the spawned <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Spawn(UnityEngine.Vector3,Exiled.API.Features.Player)">
            <summary>
            Spawns the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> in a specific position.
            </summary>
            <param name="position">The <see cref="T:UnityEngine.Vector3"/> where the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> will be spawned.</param>
            <param name="previousOwner">The <see cref="P:Exiled.API.Features.Pickups.Pickup.PreviousOwner"/> of the item. Can be null.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> of the spawned <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Spawn(UnityEngine.Vector3,Exiled.API.Features.Items.Item,Exiled.API.Features.Player)">
            <summary>
            Spawns an <see cref="T:Exiled.API.Features.Items.Item"/> as <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> in a specific position.
            </summary>
            <param name="position">The <see cref="T:UnityEngine.Vector3"/> where the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> will be spawned.</param>
            <param name="item">The <see cref="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem.ItemType"/> to be spawned as a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.</param>
            <param name="previousOwner">The <see cref="P:Exiled.API.Features.Pickups.Pickup.PreviousOwner"/> of the item. Can be null.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> of the spawned <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Spawn(System.Collections.Generic.IEnumerable{Exiled.API.Features.Spawn.SpawnPoint},System.UInt32)">
            <summary>
            Spawns the specified number of items at given spawn points.
            </summary>
            <param name="spawnPoints">The collection of spawn points to use.</param>
            <param name="limit">The maximum number of items to spawn.</param>
            <returns>The total number of items spawned.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.SpawnAll">
            <summary>
            Spawns all items at their dynamic and static positions.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Give(Exiled.API.Features.Player,Exiled.API.Features.Items.Item,System.Boolean)">
            <summary>
            Gives a specific <see cref="T:Exiled.API.Features.Items.Item"/> to the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to receive the item.</param>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> to be given to the player.</param>
            <param name="displayMessage">Determines whether to display a message for the action (default is true).</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Give(Exiled.API.Features.Player,Exiled.API.Features.Pickups.Pickup,System.Boolean)">
            <summary>
            Gives the specified <see cref="T:Exiled.API.Features.Pickups.Pickup"/> to the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to receive the pickup.</param>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> to be given to the player.</param>
            <param name="displayMessage">Determines whether to display a message for the action (default is true).</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.Give(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Gives a new instance of the custom item to the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to receive the item.</param>
            <param name="displayMessage">Determines whether to display a message for the action (default is true).</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryRegister(System.Reflection.Assembly,Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute)">
            <summary>
            Tries to register a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.
            </summary>
            <param name="assembly">The assembly to register items from.</param>
            <param name="attribute">The specified <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> was registered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.CustomItem.TryUnregister">
            <summary>
            Tries to unregister a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> was unregistered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem`1">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.CustomItem`1.BehaviourComponent">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.Armors.ArmorBehaviour">
            <summary>
            Represents the base class for custom armor behaviors.
            </summary>
            <remarks>
            This class extends <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour"/>.
            <br/>It provides a foundation for creating custom behaviors associated with in-game armors.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Armors.ArmorBehaviour.ArmorSettings">
            <inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.Settings"/>.
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Armors.ArmorBehaviour.Armor">
            <inheritdoc cref="P:Exiled.API.Features.Core.Generic.EBehaviour`1.Owner"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Armors.ArmorBehaviour.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.Armors.ArmorSettings">
            <summary>
            A tool to easily setup armors.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Armors.ArmorSettings.ItemType">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Armors.ArmorSettings.StaminaUseMultiplier">
            <summary>
            Gets or sets how much faster stamina will drain when wearing this armor.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Armors.ArmorSettings.HelmetEfficacy">
            <summary>
            Gets or sets how strong the helmet on the armor is.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Armors.ArmorSettings.VestEfficacy">
            <summary>
            Gets or sets how strong the vest on the armor is.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.BaseCandy">
            <summary>
            A class that converts custom candy to base game candy.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.BaseCandy.#ctor(Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandySettings,System.Action{Exiled.CustomModules.API.Features.Pawn})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.BaseCandy"/> class.
            </summary>
            <param name="settings">The <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandySettings"/> that will be encapsulated.</param>
            <param name="applyEffectsDelegate">The delegate to be passed to <see cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.BaseCandy.ServerApplyEffects(ReferenceHub)"/>.</param>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.BaseCandy.Kind">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.BaseCandy.SpawnChanceWeight">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.BaseCandy.ApplyEffects">
            <summary>
            Gets the delegate to be passed to <see cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.BaseCandy.ServerApplyEffects(ReferenceHub)"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.BaseCandy.ServerApplyEffects(ReferenceHub)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour">
            <summary>
            Represents the base class for custom candies behaviors.
            </summary>
            <remarks>
            This class extends <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour"/>.
            <br/>It provides a foundation for creating custom behaviors associated with in-game candies.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.TrackedCandies">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.HashSet`1"/> containing all tracked indexes in <see cref="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.Scp330"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.CandySettings">
            <inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.Settings"/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.Scp330">
            <inheritdoc cref="P:Exiled.API.Features.Core.Generic.EBehaviour`1.Owner"/>.
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.ApplyEffects(Exiled.CustomModules.API.Features.Pawn)">
            <summary>
            Applies effect to player.
            </summary>
            <param name="player">The player to apply effects to.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.Check(Exiled.API.Features.Items.Item)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.OnAcquired(Exiled.API.Features.Player,Exiled.API.Features.Items.Item,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.OnEatingCandy(Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs)">
            <summary>
            Fired when player is eating custom candy.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs"/> event instance.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.OnEatingScp330Internal(Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyBehaviour.OnEatingCandy(Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs)"/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandySettings">
            <summary>
            A tool to easily setup candies.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandySettings.ItemType">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandySettings.CandyType">
            <summary>
            Gets or sets a <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/> of a custom candy.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandySettings.Weight">
            <summary>
            Gets or sets chance that player would get a custom candy.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandySettings.EatenCustomCandyMessage">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.TextDisplay"/> that will be displayed when player ate custom candy..
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandySettings.ReceivedCustomCandyMessage">
            <summary>
            Gets or sets a <see cref="T:Exiled.API.Features.TextDisplay"/> that will be displayed when player has received custom candy.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandySettings.SelectedText">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyTracker">
            <summary>
            A custom tracker for candies.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyTracker.OnInteractingScp330(Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Scp330.OnInteractingScp330(Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyTracker.OnInternalItemAdded(Exiled.Events.EventArgs.Player.ItemAddedEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnItemAdded(ReferenceHub,InventorySystem.Items.ItemBase,InventorySystem.Items.Pickups.ItemPickupBase)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyTracker.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.CandyTracker.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.Candies.Patches.DroppingCandy">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Usables.Scp330.Scp330NetworkHandler.ServerSelectMessageReceived(Mirror.NetworkConnection,InventorySystem.Items.Usables.Scp330.SelectScp330Message)"/> to add custom candies tracking-removing logic.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour">
            <summary>
            Represents the base class for custom grenade behaviors.
            </summary>
            <remarks>
            This class extends <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour"/>.
            <br/>It provides a foundation for creating custom behaviors associated with in-game grenades.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.GrenadeSettings">
            <inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.Settings"/>.
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.Throwable">
            <inheritdoc cref="P:Exiled.API.Features.Core.Generic.EBehaviour`1.Owner"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.Throw(UnityEngine.Vector3,System.Single,System.Single,System.Single,ItemType,Exiled.API.Features.Player)">
            <summary>
            Throw the custom grenade object.
            </summary>
            <param name="position">The <see cref="T:UnityEngine.Vector3"/> position to throw at.</param>
            <param name="force">The amount of force to throw with.</param>
            <param name="weight">The <see cref="T:System.Single"/> weight of the Grenade.</param>
            <param name="fuseTime">The <see cref="T:System.Single"/> fuse time of the grenade.</param>
            <param name="grenadeType">The <see cref="T:ItemType"/> of the grenade to spawn.</param>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to count as the thrower of the grenade.</param>
            <returns>The spawned <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.OnThrowingRequest(Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs)">
            <summary>
            Handles tracking thrown requests by custom grenades.
            </summary>
            <param name="ev"><see cref="T:Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.OnThrownProjectile(Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs)">
            <summary>
            Handles tracking thrown custom grenades.
            </summary>
            <param name="ev"><see cref="T:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.OnExploding(Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs)">
            <summary>
            Handles tracking exploded custom grenades.
            </summary>
            <param name="ev"><see cref="T:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.OnChangedIntoGrenade(Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs)">
            <summary>
            Handles the tracking of custom grenade pickups that are changed into live grenades by a frag grenade explosion.
            </summary>
            <param name="ev"><see cref="T:Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.OnInternalThrowingRequest(Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.OnThrowingRequest(Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.OnInternalThrownProjectile(Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.OnThrownProjectile(Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.OnInternalExplodingGrenade(Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.OnExploding(Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.OnInternalChangedIntoGrenade(Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeBehaviour.OnChangedIntoGrenade(Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs)"/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeSettings">
            <summary>
            A tool to easily setup grenades.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeSettings.ItemType">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeSettings.ExplodeOnCollision">
            <summary>
            Gets or sets a value indicating whether the grenade should explode immediately when contacting any surface.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Explosives.GrenadeSettings.FuseTime">
            <summary>
            Gets or sets a value indicating how long the grenade's fuse time should be.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour">
            <summary>
            Represents the base class for custom firearm behaviors.
            </summary>
            <remarks>
            This class extends <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour"/>.
            <br/>It provides a foundation for creating custom behaviors associated with in-game firearms.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.FirearmSettings">
            <inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.Settings"/>.
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.Firearm">
            <inheritdoc cref="P:Exiled.API.Features.Core.Generic.EBehaviour`1.Owner"/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.ReplicatedClip">
            <summary>
            Gets or sets the replicated clip.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.ReplicatedMaxAmmo">
            <summary>
            Gets or sets the replicated max ammo.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnReloading(Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs)">
            <summary>
            Handles reloading events for firearms.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs"/> containing information about the reloading event.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnShooting(Exiled.Events.EventArgs.Player.ShootingEventArgs)">
            <summary>
            Handles shooting events for firearms.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ShootingEventArgs"/> containing information about the shooting event.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnShot(Exiled.Events.EventArgs.Player.ShotEventArgs)">
            <summary>
            Handles shot events for firearms.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ShotEventArgs"/> containing information about the shot event.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnHurting(Exiled.Events.EventArgs.Player.HurtingEventArgs)">
            <summary>
            Handles hurting events for firearms.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.HurtingEventArgs"/> containing information about the hurting event.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnUnloading(Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs)">
            <summary>
            Handles unloading events for custom firearms.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs"/> containing information about the unloading event.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnChangingAttachments(Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs)">
            <summary>
            Handles attachments events for custom firearms.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs"/> containing information about the attachments event.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnInternalReloading(Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnReloading(Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnInternalShooting(Exiled.Events.EventArgs.Player.ShootingEventArgs)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnShooting(Exiled.Events.EventArgs.Player.ShootingEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnInternalUnloading(Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnUnloading(Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnInternalShot(Exiled.Events.EventArgs.Player.ShotEventArgs)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnShot(Exiled.Events.EventArgs.Player.ShotEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnInternalChangingAttachments(Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnChangingAttachments(Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnInternalHurting(Exiled.Events.EventArgs.Player.HurtingEventArgs)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour.OnHurting(Exiled.Events.EventArgs.Player.HurtingEventArgs)"/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings">
            <summary>
            A tool to easily setup firearms.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.ItemType">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.OverrideReload">
            <summary>
            Gets or sets a value indicating whether the custom reload logic should be used.
            <para/>
            It adds support for non-<see cref="T:Exiled.API.Enums.AmmoType"/> items.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.AmmoType">
            <summary>
            Gets or sets the firearm's ammo type.
            <para/>
            This property cannot be used along with <see cref="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.CustomAmmoType"/>.
            <br/>
            <see cref="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.OverrideReload"/> is required to be set to <see langword="true"/> in case of non-<see cref="T:Exiled.API.Enums.AmmoType"/> items.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.CustomAmmoType">
            <summary>
            Gets or sets the firearm's custom ammo type.
            <para/>
            This property cannot be used along with <see cref="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.AmmoType"/>.
            <br/>
            <see cref="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.OverrideReload"/> is required to be set to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.Attachments">
            <summary>
            Gets or sets the firearm's attachments.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.FiringMode">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Enums.FiringMode"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.Damage">
            <summary>
            Gets or sets the firearm's damage.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.MaxAmmo">
            <summary>
            Gets or sets the firearm's max ammo.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.ClipSize">
            <summary>
            Gets or sets the size of the firearm's clip.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.ChamberSize">
            <summary>
            Gets or sets the size of the firearm's chamber.
            <para/>
            <see cref="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.OverrideReload"/> is required to be set to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.FireRate">
            <summary>
            Gets or sets the firearm's fire rate.
            <para/>
            Only decreasing is supported by non-automatic firearms.
            <br/>
            Automatic firearms are not supported.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.BurstLength">
            <summary>
            Gets or sets the burst length.
            <para/>
            Only firearms with <see cref="F:Exiled.CustomModules.API.Enums.FiringMode.Burst"/> will be affected.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.RecoilSettings">
            <summary>
            Gets or sets the <see cref="T:CameraShaking.RecoilSettings"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmSettings.AllowFriendlyFire">
            <summary>
            Gets or sets a value indicating whether friendly fire is allowed with this firearm on FF-enabled servers.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.SemiAutomaticFirearmBehaviour">
            <summary>
            Represents the base class for custom semi automatic firearm behaviors.
            </summary>
            <remarks>
            This class extends <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.FirearmBehaviour"/>.
            <br/>It provides a foundation for creating custom behaviors associated with in-game firearms.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.SemiAutomaticFirearmBehaviour.FireRate">
            <summary>
            Gets or sets the firearm's fire rate.
            <para/>
            Automatic firearms won't be affected.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.SemiAutomaticFirearmBehaviour.FiringMode">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Enums.FiringMode"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.SemiAutomaticFirearmBehaviour.CanShoot">
            <summary>
            Gets a value indicating whether the firearm can shoot.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.SemiAutomaticFirearmBehaviour.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.SemiAutomaticFirearmBehaviour.OnEndPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.SemiAutomaticFirearmBehaviour.OnInternalShooting(Exiled.Events.EventArgs.Player.ShootingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.Firearms.SemiAutomaticFirearmBehaviour.OnInternalShot(Exiled.Events.EventArgs.Player.ShotEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.IItemBehaviour">
            <summary>
            Represents a marker interface for custom item behaviors.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour">
            <summary>
            Represents the base class for custom item behaviors.
            </summary>
            <remarks>
            This class extends <see cref="T:Exiled.CustomModules.API.Features.ModuleBehaviour`1"/> and implements <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Items.IItemBehaviour"/> and <see cref="T:Exiled.API.Features.Core.Interfaces.IAdditiveSettings`1"/>.
            <br/>It provides a foundation for creating custom behaviors associated with in-game items.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OwnerChangingRoleDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before owner of the item changes role.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OwnerDyingDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before owner of the item dies.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OwnerEscapingDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before owner of the item escapes.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OwnerHandcuffingDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before owner of the item gets handcuffed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.DroppingItemDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before owner of the item drops it.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.PickingUpItemDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before owner of the item picks it up.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.ChangingItemDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before owner of the item changes it.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.UpgradingPickupDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before owner of the item upgrades it.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.UpgradingItemDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before owner of the item upgrades it through his inventory.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.DisposeOnNullOwner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.CustomItem">
            <summary>
            Gets the relative <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.Settings">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.ItemOwner">
            <summary>
            Gets the item's owner.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.AdjustAdditivePipe">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.ApplyConfig(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.Check(Exiled.API.Features.Player)">
            <summary>
            Checks if the specified owner is not null and matches the owner of the item.
            </summary>
            <param name="owner">The player who owns the item.</param>
            /// <returns><see langword="true"/> if the specified owner is not null and matches the owner of the item; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method verifies if the provided owner is not null and matches the owner of the item.
            <br/>It is typically used to ensure that the owner being checked is valid and corresponds to the expected owner for the current context.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.Check(Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Checks if the specified pickup is being tracked and associated with this item.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> to check.</param>
            <returns>
            <see langword="true"/> if the specified pickup is being tracked and associated with this item; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method ensures that the provided pickup is being tracked by the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Items.ItemTracker"/>
            and the tracked values associated with the pickup contain this item instance.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OnOwnerChangingRole(Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs)">
            <summary>
            Handles tracking items when they a player changes their role.
            </summary>
            <param name="ev"><see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OnOwnerDying(Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerDyingEventArgs)">
            <summary>
            Handles making sure custom items are not "lost" when a player dies.
            </summary>
            <param name="ev"><see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerDyingEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OnOwnerEscaping(Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs)">
            <summary>
            Handles making sure custom items are not "lost" when a player escapes.
            </summary>
            <param name="ev"><see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OnOwnerHandcuffing(Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs)">
            <summary>
            Handles making sure custom items are not "lost" when being handcuffed.
            </summary>
            <param name="ev"><see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OnDropping(Exiled.Events.EventArgs.Player.DroppingItemEventArgs)">
            <summary>
            Handles tracking items when they are dropped by a player.
            </summary>
            <param name="ev"><see cref="T:Exiled.Events.EventArgs.Player.DroppingItemEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OnPickingUp(Exiled.Events.EventArgs.Player.PickingUpItemEventArgs)">
            <summary>
            Handles tracking items when they are picked up by a player.
            </summary>
            <param name="ev"><see cref="T:Exiled.Events.EventArgs.Player.PickingUpItemEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OnChangingItem(Exiled.Events.EventArgs.Player.ChangingItemEventArgs)">
            <summary>
            Handles tracking items when they are selected in the player's inventory.
            </summary>
            <param name="ev"><see cref="T:Exiled.Events.EventArgs.Player.ChangingItemEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OnUpgradingPickup(Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingEventArgs)">
            <summary>
            Prevents custom items from being affected by SCP-914.
            </summary>
            <param name="ev"><see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OnUpgradingItem(Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingItemEventArgs)">
            <inheritdoc cref="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OnUpgradingPickup(Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.OnAcquired(Exiled.API.Features.Player,Exiled.API.Features.Items.Item,System.Boolean)">
            <summary>
            Called anytime the item enters a player's inventory by any means.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> acquiring the item.</param>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> being acquired.</param>
            <param name="displayMessage">Whether the pickup hint should be displayed.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.ShowPickedUpMessage(Exiled.API.Features.Player)">
            <summary>
            Shows a message to the player upon picking up a custom item.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> who will be shown the message.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.ShowSelectedMessage(Exiled.API.Features.Player)">
            <summary>
            Shows a message to the player upon selecting a custom item.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> who will be shown the message.</param>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.ItemSettings">
            <summary>
            A tool to easily setup items.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemSettings.Default">
            <summary>
            Gets the default <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Items.ItemSettings"/> values.
            <para>It refers to the base-game item behavior.</para>
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemSettings.ItemType">
            <summary>
            Gets or sets the custom item's <see cref="T:ItemType"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemSettings.SpawnProperties">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Spawn.SpawnProperties"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemSettings.Weight">
            <summary>
            Gets or sets the weight of the item.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemSettings.Scale">
            <summary>
            Gets or sets the scale of the item.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemSettings.ShouldMessageOnGban">
            <summary>
            Gets or sets a value indicating whether or not this item causes things to happen that may be considered hacks, and thus be shown to global moderators as being present in a player's inventory when they gban them.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemSettings.PickedUpText">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.TextDisplay"/> to be displayed when the item has been picked up.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemSettings.SelectedText">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.TextDisplay"/> to be displayed when the item has been selected.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Items.ItemTracker">
            <summary>
            The actor which handles all tracking-related tasks for items.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Pickups.Ammos.AmmoBehaviour">
            <summary>
            Represents the base class for custom ammo behaviors.
            </summary>
            <remarks>
            This class extends <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour"/>.
            <br/>It provides a foundation for creating custom behaviors associated with in-game ammo.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.Ammos.AmmoBehaviour.AmmoSettings">
            <inheritdoc cref="P:Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour.Settings"/>.
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.Ammos.AmmoBehaviour.BoxSize">
            <summary>
            Gets or sets the box size.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Pickups.Ammos.AmmoBehaviour.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Pickups.Ammos.AmmoBehaviour.OnAcquired(Exiled.API.Features.Player,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Pickups.Ammos.AmmoSettings">
            <summary>
            A tool to easily setup ammos.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.Ammos.AmmoSettings.BoxSizes">
            <summary>
            Gets or sets the sizes of the ammo box.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.Ammos.AmmoSettings.MaxUnits">
            <summary>
            Gets or sets the maximum allowed amount of ammo.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Pickups.IPickupBehaviour">
            <summary>
            Represents a marker interface for custom pickup behaviors.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour">
            <summary>
            Represents the base class for custom pickup behaviors.
            </summary>
            <remarks>
            This class extends <see cref="T:Exiled.CustomModules.API.Features.ModuleBehaviour`1"/> and implements <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Pickups.IPickupBehaviour"/> and <see cref="T:Exiled.API.Features.Core.Interfaces.IAdditiveSettings`1"/>.
            <br/>It provides a foundation for creating custom behaviors associated with in-game pickup.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.PickingUpItemDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before the pickup is gets picked up.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.DisposeOnNullOwner">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.CustomItem">
            <summary>
            Gets the relative <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.Settings">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.AdjustAdditivePipe">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.ApplyConfig(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.Check(Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Checks if the specified pickup is being tracked and associated with this item.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> to check.</param>
            <returns>
            <see langword="true"/> if the specified pickup is being tracked and associated with this item; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method ensures that the provided pickup is being tracked by the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Items.ItemTracker"/>
            and the tracked values associated with the pickup contain this item instance.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.OnPickingUp(Exiled.Events.EventArgs.Player.PickingUpItemEventArgs)">
            <summary>
            Handles tracking pickups when they are picked up by a player.
            </summary>
            <param name="ev"><see cref="T:Exiled.Events.EventArgs.Player.PickingUpItemEventArgs"/>.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.OnAcquired(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Called anytime the pickup enters a player's inventory by any means.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> acquiring the pickup.</param>
            <param name="displayMessage">Whether the pickup hint should be displayed.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupBehaviour.ShowPickedUpMessage(Exiled.API.Features.Player)">
            <summary>
            Shows a message to the player upon picking up a custom item.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> who will be shown the message.</param>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupSettings">
            <summary>
            A tool to easily setup pickups.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupSettings.Default">
            <summary>
            Gets the default <see cref="T:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupSettings"/> values.
            <para>It refers to the base-game pickup behavior.</para>
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupSettings.ItemType">
            <summary>
            Gets or sets the custom pickup's <see cref="T:ItemType"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupSettings.SpawnProperties">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Spawn.SpawnProperties"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupSettings.Weight">
            <summary>
            Gets or sets the weight of the pickup.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupSettings.Scale">
            <summary>
            Gets or sets the scale of the pickup.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupSettings.PickedUpText">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.TextDisplay"/> to be displayed when the pickup has been picked up.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Pickups.PickupTracker">
            <summary>
            The actor which handles all tracking-related tasks for pickups.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomItems.Settings">
            <summary>
            Defines the contract for config features related to custom entities.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Settings.ItemType">
            <summary>
            Gets or sets the custom entity's <see cref="T:ItemType"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Settings.SpawnProperties">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Spawn.SpawnProperties"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Settings.Weight">
            <summary>
            Gets or sets the weight of the entity.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Settings.Scale">
            <summary>
            Gets or sets the scale of the entity.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomItems.Settings.PickedUpText">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.TextDisplay"/> to be displayed when the entity has been picked up.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomModule">
            <summary>
            Represents a marker class for custom modules.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.CustomModule.CUSTOM_MODULES_FOLDER">
            <summary>
            The folder where custom modules are stored.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.OnEnabled">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all delegates to be fired when a module gets enabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.OnDisabled">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all delegates to be fired when a module gets disabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.Name">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/>'s name.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.Id">
            <summary>
            Gets or sets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/>'s id.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> is enabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.Config">
            <summary>
            Gets or sets the module's configuration.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.ParentName">
            <summary>
            Gets the name of the serialized parent folder.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.ChildName">
            <summary>
            Gets the name of the child folder.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.FileName">
            <summary>
            Gets the name of the serialized child file.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.PointerName">
            <summary>
            Gets the name of the serialized module pointer.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.ParentPath">
            <summary>
            Gets the path to the parent folder.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.ChildPath">
            <summary>
            Gets the path to the serialized module child folder.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.FilePath">
            <summary>
            Gets the path to the serialized module file.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomModule.PointerPath">
            <summary>
            Gets the path to the serialized module pointer.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.op_Equality(Exiled.CustomModules.API.Features.CustomModule,System.Object)">
            <summary>
            Compares two operands: <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> and <see cref="T:System.Object"/>.
            </summary>
            <param name="left">The <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> to compare.</param>
            <param name="right">The <see cref="T:System.Object"/> to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.op_Equality(System.Object,Exiled.CustomModules.API.Features.CustomModule)">
            <summary>
            Compares two operands: <see cref="T:System.Object"/> and <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/>.
            </summary>
            <param name="left">The <see cref="T:System.Object"/> to compare.</param>
            <param name="right">The <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> to compare.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.op_Inequality(Exiled.CustomModules.API.Features.CustomModule,System.Object)">
            <summary>
            Compares two operands: <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> and <see cref="T:System.Object"/>.
            </summary>
            <param name="left">The <see cref="T:System.Object"/> to compare.</param>
            <param name="right">The <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> to compare.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.op_Inequality(System.Object,Exiled.CustomModules.API.Features.CustomModule)">
            <summary>
            Compares two operands: <see cref="T:System.Object"/> and <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/>.
            </summary>
            <param name="left">The left <see cref="T:System.Object"/> to compare.</param>
            <param name="right">The right <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> to compare.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.op_Equality(Exiled.CustomModules.API.Features.CustomModule,Exiled.CustomModules.API.Features.CustomModule)">
            <summary>
            Compares two operands: <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> and <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/>.
            </summary>
            <param name="left">The left <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> to compare.</param>
            <param name="right">The right <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.op_Inequality(Exiled.CustomModules.API.Features.CustomModule,Exiled.CustomModules.API.Features.CustomModule)">
            <summary>
            Compares two operands: <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> and <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/>.
            </summary>
            <param name="left">The left <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> to compare.</param>
            <param name="right">The right <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> to compare.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.LoadAll">
            <summary>
            Loads all custom modules from the specified assembly and enables them.
            </summary>
            <remarks>
            This method iterates through all plugins loaded by Exiled, extracts their assemblies, and attempts to load custom modules from each assembly.
            It then sets the state of the automatic modules loader to enabled.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.UnloadAll">
            <summary>
            Unloads all currently loaded custom modules and sets the automatic modules loader state to disabled.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.Load(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Loads custom modules from the specified assembly and optionally enables them.
            </summary>
            <param name="assembly">The assembly from which to load custom modules. If <see langword="null"/>, defaults to the calling assembly.</param>
            <param name="shouldBeEnabled">Determines whether the loaded modules should be enabled after loading.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.Unload(System.Reflection.Assembly)">
            <summary>
            Unloads custom modules from the specified assembly.
            </summary>
            <param name="assembly">The assembly from which to unload custom modules. If <see langword="null"/>, defaults to the calling assembly.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.Equals(System.UInt32)">
            <summary>
            Determines whether the provided id is equal to the current object.
            </summary>
            <param name="id">The id to compare.</param>
            <returns><see langword="true"/> if the object was equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.Equals(Exiled.CustomModules.API.Features.CustomModule)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="cr">The custom module to compare.</param>
            <returns><see langword="true"/> if the object was equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><see langword="true"/> if the object was equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.GetHashCode">
            <summary>
            Returns a the 32-bit signed hash code of the current object instance.
            </summary>
            <returns>The 32-bit signed hash code of the current object instance.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.SerializeModule">
            <summary>
            Serializes the current module to a file specified by <see cref="P:Exiled.CustomModules.API.Features.CustomModule.ChildPath"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="P:Exiled.CustomModules.API.Features.CustomModule.ChildPath"/> is null.</exception>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.DeserializeModule">
            <summary>
            Deserializes the module from the file specified by <see cref="P:Exiled.CustomModules.API.Features.CustomModule.ChildPath"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.TryRegister(System.Reflection.Assembly,Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute)">
            <summary>
            Tries to register a <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/>.
            </summary>
            <param name="assembly">The assembly to register <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> from.</param>
            <param name="attribute">The specified <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> was registered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomModule.TryUnregister">
            <summary>
            Tries to unregister a <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/>.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomModule"/> was unregistered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole">
            <summary>
            Abstract base class providing a foundation for custom role management, integrating seamlessly with various game behaviors.
            </summary>
            <remarks>
            The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> class establishes a robust framework for creating and managing custom roles within the game architecture.
            <para>
            This class is designed to be utilized in conjunction with the <see cref="T:Exiled.API.Features.Core.Interfaces.IAdditiveBehaviour"/> interface, ensuring easy integration into existing systems for extending and enhancing role-related functionalities.
            <br/>Additionally, <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> implements <see cref="T:System.IEquatable`1"/> and <see cref="T:System.IEquatable`1"/>, enabling straightforward equality comparisons.
            </para>
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.ChangingCustomRoleDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all delegates to be fired before a player changes role.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.ChangedCustomRoleDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all delegates to be fired after a player changes role.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> which contains all registered <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>'s.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Manager">
            <summary>
            Gets all players and their respective <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Players">
            <summary>
            Gets all players belonging to a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Config">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.BehaviourComponent">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>'s <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Name">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>'s name.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Id">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>'s id.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Description">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>'s description.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> is enabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Role">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>'s <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Probability">
            <summary>
            Gets or sets the relative spawn chance of the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.RequiredTeamToSpawn">
            <summary>
            Gets or sets the required <see cref="T:PlayerRoles.Team"/> that players must belong to in order to allow the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> to spawn.
            </summary>
            <remarks>
            This property specifies the required alive team to be eligible for spawning in the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.RequiredRoleToSpawn">
            <summary>
            Gets or sets the required <see cref="T:PlayerRoles.RoleTypeId"/> that players must have to allow the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> to spawn.
            </summary>
            <remarks>
            This property specifies the required role type for players to be eligible for spawning in the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.RequiredCustomTeamToSpawn">
            <summary>
            Gets or sets the required custom team that players must belong to in order to allow the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> to spawn.
            </summary>
            <remarks>
            This property specifies the required alive custom team to be eligible for spawning in the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.RequiredCustomRoleToSpawn">
            <summary>
            Gets or sets the required <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> that players must have to allow the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> to spawn.
            </summary>
            <remarks>
            This property specifies the required custom role for players to be eligible for spawning in the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Settings">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.EscapeSettings">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeSettings"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.MaxInstances">
            <summary>
            Gets or sets a value representing the maximum instances of the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> that can be automatically assigned.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TeamsOwnership">
            <summary>
            Gets or sets the required teams for this <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> to win.
            </summary>
            <remarks>
            This property specifies the teams the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> belongs to.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.AssignFromTeam">
            <summary>
            Gets or sets the <see cref="T:Respawning.SpawnableTeamType"/> from which to retrieve players for assigning the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.AssignFromRole">
            <summary>
            Gets or sets the <see cref="T:PlayerRoles.RoleTypeId"/> from which to retrieve players for assigning the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.OverrideScps">
            <summary>
            Gets or sets all roles to override, preventing the specified roles to spawn.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.IsTeamUnit">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> should be treated as a separate team unit.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.IsScp">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> should be considered an SCP.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.CanSpawnByProbability">
            <summary>
            Gets a value indicating whether a player can spawn as this <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> based on its assigned probability.
            </summary>
            <returns><see langword="true"/> if the probability condition was satisfied; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Instances">
            <summary>
            Gets all instances of this <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.EvaluateConditions">
            <summary>
            Gets a value indicating whether the role can spawn given a condition.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.EscapeBehaviourComponent">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>'s <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.IsRegistered">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> is registered.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Owners">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> containing all players owning this <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get(System.Object)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> based on the provided id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomRoleType"/>.
            </summary>
            <param name="id">The id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomRoleType"/> of the custom role.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> with the specified id, or <see langword="null"/> if no role is found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get(System.UInt32)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> given the specified id.
            </summary>
            <param name="id">The specified id.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> given the specified name.
            </summary>
            <param name="name">The specified name.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get(System.Type)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> given the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The specified <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get(System.Func{Exiled.CustomModules.API.Features.CustomRoles.CustomRole,System.Boolean})">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> instances based on the predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>All <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> instances matching the predicate.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get(PlayerRoles.RoleTypeId)">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> instances belonging to the specified <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="role">The specified <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>All <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> instances belonging to the specified <see cref="T:PlayerRoles.RoleTypeId"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get(Respawning.SpawnableTeamType)">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> instances belonging to the specified <see cref="T:PlayerRoles.Team"/>.
            </summary>
            <param name="team">The specified <see cref="T:PlayerRoles.Team"/>.</param>
            <returns>All <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> instances belonging to the specified <see cref="T:PlayerRoles.Team"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get(PlayerRoles.Team)">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> instances belonging to the specified <see cref="T:PlayerRoles.Team"/>.
            </summary>
            <param name="team">The specified <see cref="T:PlayerRoles.Team"/>.</param>
            <returns>All <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> instances belonging to the specified <see cref="T:PlayerRoles.Team"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get(System.Collections.Generic.IEnumerable{PlayerRoles.Team})">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> instances belonging to the specified teams.
            </summary>
            <param name="teams">The specified teams.</param>
            <returns>All <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> instances belonging to the specified teams.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get(PlayerRoles.Team[])">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> instances belonging to the specified teams.
            </summary>
            <param name="teams">The specified teams.</param>
            <returns>All <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> instances belonging to the specified teams.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get``1">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> given the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.Type"/>.</typeparam>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> matching the search or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Get(Exiled.CustomModules.API.Features.Pawn)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> from a <see cref="T:Exiled.CustomModules.API.Features.Pawn"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> owner.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> matching the search or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TryGet(System.Object,Exiled.CustomModules.API.Features.CustomRoles.CustomRole@)">
            <summary>
            Attempts to retrieve a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> based on the provided id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomRoleType"/>.
            </summary>
            <param name="id">The id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomRoleType"/> of the custom role.</param>
            <param name="customRole">When this method returns, contains the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> associated with the specified id, if the id was found; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TryGet(System.UInt32,Exiled.CustomModules.API.Features.CustomRoles.CustomRole@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> given the specified id.
            </summary>
            <param name="id">The id to look for.</param>
            <param name="customRole">The found <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TryGet(System.String,Exiled.CustomModules.API.Features.CustomRoles.CustomRole@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> given a specified name.
            </summary>
            <param name="name">The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> name to look for.</param>
            <param name="customRole">The found <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TryGet(Exiled.CustomModules.API.Features.Pawn,Exiled.CustomModules.API.Features.CustomRoles.CustomRole@)">
            <summary>
            Tries to get the player's current <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to search on.</param>
            <param name="customRole">The found <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TryGet(System.Type,Exiled.CustomModules.API.Features.CustomRoles.CustomRole@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> given the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to search for.</param>
            <param name="customRole">The found <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>, <see langword="null"/> if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TrySpawn(Exiled.CustomModules.API.Features.Pawn,Exiled.CustomModules.API.Features.CustomRoles.CustomRole)">
            <summary>
            Attempts to spawn the specified player with the provided custom role.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to be spawned.</param>
            <param name="customRole">The custom role to be assigned to the player.</param>
            <returns>
            <see langword="true"/> if the player was spawned with the custom role successfully; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method attempts to spawn the specified player with the given custom role. If the custom role is not provided
            or is invalid, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TrySpawn(Exiled.CustomModules.API.Features.Pawn,System.UInt32)">
            <summary>
            Attempts to spawn the specified player with the custom role identified by the provided type or type name.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to be spawned.</param>
            <param name="id">The id of the custom role to be assigned to the player.</param>
            <returns>
            <see langword="true"/> if the player was spawned with the custom role successfully; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method allows attempting to spawn the specified player with a custom role identified by its type or type name.
            If the custom role type or name is not provided, or if the identification process fails, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TrySpawn(Exiled.CustomModules.API.Features.Pawn,System.String)">
            <summary>
            Attempts to spawn the specified player with the custom role identified by the provided name.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to be spawned.</param>
            <param name="name">The name of the custom role to be assigned to the player.</param>
            <returns>
            <see langword="true"/> if the player was spawned with the custom role successfully; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method allows attempting to spawn the specified player with a custom role identified by its name.
            If the custom role name is not provided, or if the identification process fails, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Spawn(Exiled.CustomModules.API.Features.Pawn,Exiled.CustomModules.API.Features.CustomRoles.CustomRole,System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Spawns the specified player with the provided custom role.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to be spawned.</param>
            <param name="customRole">The custom role to be assigned to the player.</param>
            <param name="preservePosition">A value indicating whether the custom role assignment should maintain the player's current position.</param>
            <param name="spawnReason">The <see cref="T:Exiled.API.Enums.SpawnReason"/> to be set.</param>
            <param name="roleSpawnFlags">The <see cref="T:PlayerRoles.RoleSpawnFlags"/> to be set.</param>
            <returns>
            <see langword="true"/> if the player was spawned with the custom role successfully; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method forces the specified player to respawn with the given custom role. If the custom role is
            not provided or is invalid, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Spawn(Exiled.CustomModules.API.Features.Pawn,System.UInt32,System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Spawns the specified player with the custom role identified by the provided type or type name.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to be spawned.</param>
            <param name="id">The id of the custom role to be assigned to the player.</param>
            <param name="preservePosition">A value indicating whether the custom role assignment should maintain the player's current position.</param>
            <param name="spawnReason">The <see cref="T:Exiled.API.Enums.SpawnReason"/> to be set.</param>
            <param name="roleSpawnFlags">The <see cref="T:PlayerRoles.RoleSpawnFlags"/> to be set.</param>
            <returns>
            <see langword="true"/> if the player was spawned with the custom role successfully; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method allows the spawning of the specified player with a custom role identified by its type or type name.
            If the custom role type or name is not provided, or if the identification process fails, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Spawn(Exiled.CustomModules.API.Features.Pawn,System.String,System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Spawns the specified player with the custom role identified by the provided name.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to be spawned.</param>
            <param name="name">The name of the custom role to be assigned to the player.</param>
            <param name="preservePosition">A value indicating whether the custom role assignment should maintain the player's current position.</param>
            <param name="spawnReason">The <see cref="T:Exiled.API.Enums.SpawnReason"/> to be set.</param>
            <param name="roleSpawnFlags">The <see cref="T:PlayerRoles.RoleSpawnFlags"/> to be set.</param>
            <returns>
            <see langword="true"/> if the player was spawned with the custom role successfully; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method allows the spawning of the specified player with a custom role identified by its name.
            If the custom role name is not provided, or if the identification process fails, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Spawn``1(Exiled.CustomModules.API.Features.Pawn)">
            <summary>
            Spawns the specified player with the custom role identified by the provided type.
            </summary>
            <typeparam name="T">The type of custom role to be added.</typeparam>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to be spawned.</param>
            <returns>
            <see langword="true"/> if the player was spawned with the custom role successfully; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method add the custom role of type <typeparamref name="T"/> assigned to the specified player.
            If the addition operation fails, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Remove(Exiled.CustomModules.API.Features.Pawn)">
            <summary>
            Removes the custom role from the specified player.
            </summary>
            <param name="player">The owner of the custom role.</param>
            <returns>
            <see langword="true"/> if the custom role was removed successfully; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method removes the custom role assigned to the specified player. If the player does not
            have a custom role or if the removal operation fails, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Remove``1(Exiled.CustomModules.API.Features.Pawn)">
            <summary>
            Removes the custom role of type <typeparamref name="T"/> from the specified player.
            </summary>
            <typeparam name="T">The type of custom role to be removed.</typeparam>
            <param name="player">The owner of the custom role.</param>
            <returns>
            <see langword="true"/> if the custom role was removed successfully; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method removes the custom role of type <typeparamref name="T"/> assigned to the specified player.
            If the player does not have the specified custom role or if the removal operation fails,
            the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Remove(System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.Pawn})">
            <summary>
            Removes the custom role from each player in the specified collection.
            </summary>
            <param name="players">The collection of players whose custom roles will be removed.</param>
            <remarks>
            This method removes the custom role from each player in the provided collection. Players without
            a custom role or for whom the removal operation fails will be excluded from the removal process.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Remove``1(System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.Pawn})">
            <summary>
            Removes the custom role of type <typeparamref name="T"/> from each player in the specified collection.
            </summary>
            <typeparam name="T">The type of custom role to be removed.</typeparam>
            <param name="players">The collection of players whose custom roles will be removed.</param>
            <remarks>
            This method removes the custom role of type <typeparamref name="T"/> from each player in the provided collection.
            Players without the specified custom role or for whom the removal operation fails will be excluded from the removal process.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.EnableAll">
            <summary>
            Enables all the custom roles present in the assembly.
            </summary>
            <remarks>
            This method dynamically enables all custom roles found in the calling assembly. Custom roles
            must be marked with the <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/> to be considered for enabling. If
            a custom role is enabled successfully, it is added to the returned list.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.EnableAll(System.Reflection.Assembly)">
            <summary>
            Enables all the custom roles present in the assembly.
            </summary>
            <param name="assembly">The assembly to enable the roles from.</param>
            <remarks>
            This method dynamically enables all custom roles found in the calling assembly. Custom roles
            must be marked with the <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/> to be considered for enabling.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.DisableAll">
            <summary>
            Disables all the custom roles present in the assembly.
            </summary>
            <remarks>
            This method dynamically disables all custom roles found in the calling assembly that were
            previously registered.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Spawn(Exiled.CustomModules.API.Features.Pawn,System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Spawns the player as a specific <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to be spawned.</param>
            <param name="preservePosition">A value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> assignment should maintain the player's current position.</param>
            <param name="spawnReason">The <see cref="T:Exiled.API.Enums.SpawnReason"/> to be set.</param>
            <param name="roleSpawnFlags">The <see cref="T:PlayerRoles.RoleSpawnFlags"/> to be set.</param>
            <returns>
            <see langword="true"/> if the player was spawned; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method spawns the specified player as the current  <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>, adding the
            required behavior component. If the player is already alive, the spawn operation
            fails and returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Spawn(System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.Pawn})">
            <summary>
            Spawns each player in the specified collection as a specific <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
            <param name="players">The collection of <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> instances to be spawned.</param>
            <remarks>
            This method spawns each player in the provided collection as the current  <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>,
            adding the required behavior component. Players that are already alive will not be
            affected by the spawn operation. The method is designed for spawning multiple players
            with a single call.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.ForceSpawn(Exiled.CustomModules.API.Features.Pawn)">
            <summary>
            Force spawns the specified player as a specific <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to be force spawned.</param>
            <remarks>
            This method forcefully spawns the player as the current <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>, regardless of
            the player's current state. If the player is not alive, it is immediately spawned;
            otherwise, the player's role is temporarily set to Spectator before being force spawned.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.ForceSpawn(Exiled.CustomModules.API.Features.Pawn,System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Force spawns the specified player as a specific <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to be force spawned.</param>
            <param name="preservePosition">A value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> assignment should maintain the player's current position.</param>
            <param name="spawnReason">The <see cref="T:Exiled.API.Enums.SpawnReason"/> to be set.</param>
            <param name="roleSpawnFlags">The <see cref="T:PlayerRoles.RoleSpawnFlags"/> to be set.</param>
            <remarks>
            This method forcefully spawns the player as the current  <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>, regardless of
            the player's current state. If the player is not alive, it is immediately spawned;
            otherwise, the player's role is temporarily set to Spectator before being force spawned.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.ForceSpawn(System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.Pawn})">
            <summary>
            Force spawns each player in the specified collection as a specific <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
            <param name="players">The collection of <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> instances to be force spawned.</param>
            <remarks>
            This method forcefully spawns each player in the provided collection as the current CustomRole,
            regardless of their current state. Players that are not alive will be immediately spawned;
            otherwise, their roles are temporarily set to Spectator before being force spawned.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.ForceSpawn(System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.Pawn},System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Force spawns each player in the specified collection as a specific <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
            <param name="players">The collection of <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> instances to be force spawned.</param>
            <param name="preservePosition">A value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> assignment should maintain the players' current positions.</param>
            <param name="spawnReason">The <see cref="T:Exiled.API.Enums.SpawnReason"/> to be set.</param>
            <param name="roleSpawnFlags">The <see cref="T:PlayerRoles.RoleSpawnFlags"/> to be set..</param>
            <remarks>
            This method forcefully spawns each player in the provided collection as the current CustomRole,
            regardless of their current state. Players that are not alive will be immediately spawned;
            otherwise, their roles are temporarily set to Spectator before being force spawned.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Eject(Exiled.CustomModules.API.Features.Pawn)">
            <summary>
            Removes the custom role from the specified player.
            </summary>
            <param name="player">The owner of the custom role.</param>
            <returns>
            <see langword="true"/> if the custom role was removed successfully; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method removes the custom role assigned to the specified player. If the player does not
            have a custom role or if the removal operation fails, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.Eject(System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.Pawn})">
            <summary>
            Removes the custom role from each player in the specified collection.
            </summary>
            <param name="players">The collection of players whose custom roles will be removed.</param>
            <remarks>
            This method removes the custom role from each player in the provided collection. Players without
            a custom role or for whom the removal operation fails will be excluded from the removal process.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TryRegister(System.Reflection.Assembly,Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute)">
            <summary>
            Tries to register a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
            <param name="assembly">The assembly to try and register from.</param>
            <param name="attribute">The specified <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> was registered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomRole.TryUnregister">
            <summary>
            Tries to unregister a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> was unregistered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam">
            <summary>
            Abstract base class representing a custom team, providing a foundational structure for custom team management.
            </summary>
            <remarks>
            The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> class forms the basis for creating and managing custom teams within the game architecture.
            <para>
            This class implements the <see cref="T:System.IEquatable`1"/> interface, facilitating straightforward equality comparisons, and also implements <see cref="T:System.IEquatable`1"/> for integer-based comparisons.
            <br/>It serves as a versatile framework for handling custom team-related functionalities and interactions.
            </para>
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> which contains all registered <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>'s.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Manager">
            <summary>
            Gets all players and their respective <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Players">
            <summary>
            Gets all players belonging to a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Config">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Name">
            <summary>
            Gets or sets the name of the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Id">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>'s id.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> is enabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.DisplayName">
            <summary>
            Gets or sets the display name of the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
            <remarks>
            The display name is used to represent the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> in user interfaces and other visual contexts.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.DisplayColor">
            <summary>
            Gets or sets the display color of the <see cref="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Name"/>.
            </summary>
            <remarks>
            The display color is the visual representation of the name color in user interfaces and other visual contexts.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Size">
            <summary>
            Gets or sets the size of the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
            <remarks>
            The size indicates the maximum number of players that can be part of this <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Units">
            <summary>
            Gets or sets a collection of ids representing all custom roles offered as units.
            </summary>
            <remarks>
            This property provides access to a curated collection of <see cref="T:System.UInt32"/> objects, encapsulating all available custom role  within the context of units.
            <br/>The collection is designed to be both queried and modified as needed to accommodate dynamic scenarios within the game architecture.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.MinNextSequenceTime">
            <summary>
            Gets or sets the minimum amount time after which any team will be allowed to spawn.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.MaxNextSequenceTime">
            <summary>
            Gets or sets the maximum amount time after which any team will be spawned.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Probability">
            <summary>
            Gets or sets the relative spawn probability of the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.SpawnableFromTeams">
            <summary>
            Gets or sets the <see cref="T:Respawning.SpawnableTeamType"/> which is being spawned from.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.UseTickets">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> is configured to use respawn tickets.
            </summary>
            <remarks>
            If set to <c>true</c>, the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> utilizes a ticket system for player respawns.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Tickets">
            <summary>
            Gets or sets the current number of respawn tickets available for the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
            <remarks>
            This property represents the remaining number of respawn tickets that can be used by the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.RequiredTeamToSpawn">
            <summary>
            Gets or sets the required <see cref="T:PlayerRoles.Team"/> that players must belong to in order to allow the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> to spawn.
            </summary>
            <remarks>
            This property specifies the required alive team to be eligible for spawning in the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.RequiredRoleToSpawn">
            <summary>
            Gets or sets the required <see cref="T:PlayerRoles.RoleTypeId"/> that players must have to allow the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> to spawn.
            </summary>
            <remarks>
            This property specifies the required role type for players to be eligible for spawning in the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.RequiredCustomTeamToSpawn">
            <summary>
            Gets or sets the required custom team that players must belong to in order to allow the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> to spawn.
            </summary>
            <remarks>
            This property specifies the required alive custom team to be eligible for spawning in the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.RequiredCustomRoleToSpawn">
            <summary>
            Gets or sets the required <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> that players must have to allow the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> to spawn.
            </summary>
            <remarks>
            This property specifies the required custom role for players to be eligible for spawning in the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TeamsOwnership">
            <summary>
            Gets or sets the teams the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> belongs to.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.NextSequenceTime">
            <summary>
            Gets the amount of time after which any team will be allowed to spawn.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.CanSpawnByProbability">
            <summary>
            Gets a value indicating whether a player can spawn as this <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> based on its assigned probability.
            </summary>
            <returns><see langword="true"/> if the probability condition was satisfied; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.EvaluateConditions">
            <summary>
            Gets a value indicating whether the team can spawn given a condition.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.IsRegistered">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> is registered.
            </summary>
            <remarks>
            If set to <c>true</c>, the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> is successfully registered.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Owners">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> containing all players belonging to this <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
            <remarks>
            This property returns a collection of players associated with the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.RandomUnit">
            <summary>
            Gets a random <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> from the available <see cref="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Units"/>.
            </summary>
            <remarks>
            This property returns a randomly selected <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> from the available <see cref="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Units"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Get(System.Func{Exiled.CustomModules.API.Features.CustomRoles.CustomTeam,System.Boolean})">
            <summary>
            Gets all <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> instances based on the predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>All <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> instances matching the predicate.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Get(System.Object)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> based on the provided id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomTeamType"/>.
            </summary>
            <param name="id">The id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomTeamType"/> of the custom team.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> with the specified id, or <see langword="null"/> if no team is found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Get(System.UInt32)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> instance based on the specified id.
            </summary>
            <param name="id">The id to check.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> matching the search, or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> instance based on the specified name.
            </summary>
            <param name="name">The specified name.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> matching the search, or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Get(Exiled.API.Features.Player)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> instance associated with a specific <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns>The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> matching the search, or <see langword="null"/> if not registered.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TryGet(System.Object,Exiled.CustomModules.API.Features.CustomRoles.CustomTeam@)">
            <summary>
            Attempts to retrieve a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> based on the provided id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomTeamType"/>.
            </summary>
            <param name="id">The id or <see cref="T:Exiled.CustomModules.API.Enums.UUCustomTeamType"/> of the custom team.</param>
            <param name="customTeam">When this method returns, contains the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> associated with the specified id, if the id was found; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TryGet(System.UInt32,Exiled.CustomModules.API.Features.CustomRoles.CustomTeam@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> given the specified id.
            </summary>
            <param name="id">The id to look for.</param>
            <param name="customTeam">The found <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>, null if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> is found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TryGet(System.String,Exiled.CustomModules.API.Features.CustomRoles.CustomTeam@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> given the specified name.
            </summary>
            <param name="name">The name to look for.</param>
            <param name="customTeam">The found <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>, null if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> is found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TryGet(Exiled.CustomModules.API.Features.Pawn,Exiled.CustomModules.API.Features.CustomRoles.CustomTeam@)">
            <summary>
            Tries to get a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> belonging to the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to look for.</param>
            <param name="customTeam">The found <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>, null if not registered.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> is found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TryRespawn(Exiled.CustomModules.API.Features.CustomRoles.CustomTeam)">
            <summary>
            Tries to spawn the specified <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
            <param name="customTeam">The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> to be spawned.</param>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> was successfully spawned; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TryRespawn(System.UInt32)">
            <summary>
            Tries to spawn a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> given the specified id.
            </summary>
            <param name="id">The specified id.</param>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> was successfully spawned; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TrySpawn(Exiled.CustomModules.API.Features.Pawn,Exiled.CustomModules.API.Features.CustomRoles.CustomTeam)">
            <summary>
            Tries to spawn a player as a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> unit.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to be spawned.</param>
            <param name="customTeam">The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> unit to be assigned.</param>
            <returns><see langword="true"/> if the player was successfully spawned; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TrySpawn(Exiled.CustomModules.API.Features.Pawn,System.UInt32)">
            <summary>
            Tries to spawn a player as a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> unit given the specified id.
            </summary>
            <param name="player">The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> to be spawned.</param>
            <param name="id">The specified id.</param>
            <returns><see langword="true"/> if the player was successfully spawned; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TrySpawn(System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.Pawn},Exiled.CustomModules.API.Features.CustomRoles.CustomTeam)">
            <summary>
            Tries to spawn a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> as a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> unit.
            </summary>
            <param name="players">The players to be spawned.</param>
            <param name="customTeam">The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> unit to be assigned.</param>
            <returns><see langword="true"/> if the players were successfully spawned; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TrySpawn(System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.Pawn},System.UInt32)">
            <summary>
            Tries to spawn a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> as a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> unit given the specified id.
            </summary>
            <param name="players">The players to be spawned.</param>
            <param name="id">The specified id.</param>
            <returns><see langword="true"/> if the players were successfully spawned; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TrySpawn(System.Int32,Exiled.CustomModules.API.Features.CustomRoles.CustomTeam)">
            <summary>
            Tries to spawn a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> given a specified amount of units.
            </summary>
            <param name="amount">The amount of units to be spawned.</param>
            <param name="customTeam">The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> to be spawned.</param>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> was successfully spawned; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TrySpawn(System.Int32,System.UInt32)">
            <summary>
            Tries to spawn a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> given the specified id.
            </summary>
            <param name="amount">The amount of units to be spawned.</param>
            <param name="id">The specified id.</param>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> was successfully spawned; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.EnableAll">
            <summary>
            Enables all the custom teams present in the assembly.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.EnableAll(System.Reflection.Assembly)">
            <summary>
            Enables all the custom teams present in the assembly.
            </summary>
            <param name="assembly">The assembly to enable the teams from.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.DisableAll">
            <summary>
            Disables all the custom teams present in the assembly.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Equals(System.Int32)">
            <summary>
            Determines whether the provided id is equal to the current object.
            </summary>
            <param name="id">The id to compare.</param>
            <returns><see langword="true"/> if the object was equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Equals(Exiled.CustomModules.API.Features.CustomRoles.CustomTeam)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="cr">The custom role to compare.</param>
            <returns><see langword="true"/> if the object was equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><see langword="true"/> if the object was equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.GetHashCode">
            <summary>
            Returns a the 32-bit signed hash code of the current object instance.
            </summary>
            <returns>The 32-bit signed hash code of the current object instance.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Spawn(Exiled.CustomModules.API.Features.Pawn)">
            <summary>
            Spawns a <see cref="T:Exiled.API.Features.Player"/> as a unit within the current <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to be spawned.</param>
            <remarks>
            This method initiates the spawning of the specified <paramref name="player"/> as a unit associated with the current <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Eject(Exiled.CustomModules.API.Features.Pawn)">
            <summary>
            Removes the player from the specified custom team.
            </summary>
            <param name="player">The owner of the custom team's role.</param>
            <returns>
            <see langword="true"/> if the custom team's role was removed successfully; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method removes the custom team's role assigned to the specified player. If the player does not
            have a custom role or if the removal operation fails, the method returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Respawn(System.Int32,System.Boolean)">
            <summary>
            Forces a respawn wave by spawning the specified amount of units.
            </summary>
            <param name="amount">The number of units to be spawned.</param>
            <param name="isForced">Forces the respawn wave regardless any conditions, including tickets.</param>
            <remarks>
            If the provided <paramref name="amount"/> is less than or equal to zero, no respawn action is taken.
            <para>
            This method retrieves the players from the dead team and spawns each player individually. If the dead team is empty or no players are found, the method exits.
            </para>
            <para>
            Additionally, if the respawn team is of type <see cref="F:Respawning.SpawnableTeamType.NineTailedFox"/> and a valid <see cref="T:Respawning.NamingRules.UnitNamingRule"/> is available using <see cref="M:Respawning.NamingRules.UnitNamingRule.TryGetNamingRule(Respawning.SpawnableTeamType,Respawning.NamingRules.UnitNamingRule@)"/>, a new unit naming message is sent for NineTailedFox units.
            </para>
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Respawn(System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.Pawn},System.Boolean,System.Boolean)">
            <summary>
            Forces a respawn wave using the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="players">The collection of players to be spawned.</param>
            <param name="keepSize">A value indicating whether the team size should remain the same as the specified collection.</param>
            <param name="isForced">Forces the respawn wave regardless any conditions, including tickets.</param>
            <remarks>
            If the provided collection of <paramref name="players"/> is null or empty, no respawn action is taken.
            <para>
            If the respawn system utilizes tickets (specified by <see cref="P:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.UseTickets"/>), and there are available tickets, one ticket is consumed for each player respawned.
            </para>
            <para>
            The method iterates through the collection of players, spawning each player individually. The <paramref name="keepSize"/> parameter controls whether the team size should remain constant or not. If <paramref name="keepSize"/> is set to <see langword="false"/> and the team size limit is reached, further spawning is halted.
            </para>
            <para>
            Additionally, if the respawn team is of type <see cref="F:Respawning.SpawnableTeamType.NineTailedFox"/> and a valid <see cref="T:Respawning.NamingRules.UnitNamingRule"/> is available using <see cref="M:Respawning.NamingRules.UnitNamingRule.TryGetNamingRule(Respawning.SpawnableTeamType,Respawning.NamingRules.UnitNamingRule@)"/>, a new unit naming message is sent for NineTailedFox units.
            </para>
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.Respawn(System.Boolean)">
            <summary>
            Forces a respawn wave, spawning players up to the specified team size.
            </summary>
            <param name="isForced">Forces the respawn wave regardless any conditions, including tickets.</param>
            <remarks>
            This method triggers a respawn wave, spawning players up to the current team size limit.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.AddTickets(System.UInt32)">
            <summary>
            Adds respawn tickets to the current <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> instance.
            </summary>
            <param name="amount">The amount of tickets to add.</param>
            <remarks>
            This method increases the current respawn ticket count by the specified <paramref name="amount"/>.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.RemoveTickets(System.UInt32)">
            <summary>
            Removes respawn tickets from the current <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> instance.
            </summary>
            <param name="amount">The amount of tickets to remove.</param>
            <remarks>
            This method decreases the current respawn ticket count by the specified <paramref name="amount"/>. If the ticket count is insufficient, no tickets are removed.
            </remarks>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TryRegister(System.Reflection.Assembly,Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute)">
            <summary>
            Tries to register a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
            <param name="assembly">Unused parameter.</param>
            <param name="attribute">The specified <see cref="T:Exiled.CustomModules.API.Features.Attributes.ModuleIdentifierAttribute"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> was registered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam.TryUnregister">
            <summary>
            Tries to register a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/> was unregistered; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole`1">
            <inheritdoc/>
            <typeparam name="T">The <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour"/> type.</typeparam>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.CustomRole`1.BehaviourComponent">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour">
            <summary>
            Represents the base class for custom role behaviors.
            </summary>
            <remarks>
            This class extends <see cref="T:Exiled.CustomModules.API.Features.ModuleBehaviour`1"/> and implements <see cref="T:Exiled.API.Features.Core.Interfaces.IAdditiveSettings`1"/>.
            <br/>It provides a foundation for creating custom behaviors associated with in-game player roles.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.StaticPlayers">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:Exiled.API.Features.Player"/> containing all players to be spawned without affecting their current position (static).
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.CustomRole">
            <summary>
            Gets the relative <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.CustomTeam">
            <summary>
            Gets the relative <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.Settings">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.SpawnPoint">
            <summary>
            Gets a random spawn point based on existing settings.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.FakeAppearance">
            <summary>
            Gets or sets the <see cref="T:PlayerRoles.RoleTypeId"/> of the fake appearance applied by this <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour"/> component.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.Inventory">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Features.Inventory.InventoryManager"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.PermanentEffects">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.EffectType"/> which should be permanently given to the player.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.UseFakeAppearance">
            <summary>
            Gets a value indicating whether <see cref="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.FakeAppearance"/> should be used.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.UseCustomSpawnpoint">
            <summary>
            Gets a value indicating whether an existing spawnpoint should be used.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.SustainEffects">
            <summary>
            Gets or sets a value indicating whether the effects should persistently remain active.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.Role">
            <summary>
            Gets or sets the <see cref="T:PlayerRoles.RoleTypeId"/> of this <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour"/> component.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.CurrentSpeed">
            <summary>
            Gets the current speed of the  <see cref="P:Exiled.API.Features.Core.Generic.EBehaviour`1.Owner"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.EscapeSettings">
            <summary>
            Gets or sets the the escape settings.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.EscapingEventDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> handling all bound delegates to be fired before escaping.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.EscapedEventDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> handling all bound delegates to be fired after escaping.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.IsDamageAllowed(Exiled.API.Enums.DamageType)">
            <summary>
            Gets a value indicating whether the specified <see cref="T:Exiled.API.Enums.DamageType"/> is allowed.
            </summary>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> to check.</param>
            <returns><see langword="true"/> if the specified <see cref="T:Exiled.API.Enums.DamageType"/> is allowed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.IsDamageIgnored(Exiled.API.Enums.DamageType)">
            <summary>
            Gets a value indicating whether the specified <see cref="T:Exiled.API.Enums.DamageType"/> is ignored.
            </summary>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> to check.</param>
            <returns><see langword="true"/> if the specified <see cref="T:Exiled.API.Enums.DamageType"/> is ignored; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.EvaluateEndingConditions">
            <summary>
            Evaluates the specified conditions affecting the round's ending conditions.
            </summary>
            <returns>The corresponding evaluation.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.AdjustAdditivePipe">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.ApplyConfig(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.OnBeginPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.OnEndPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.OnEscaping(Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs)">
            <summary>
            Fired before the player escapes.
            </summary>
            <param name="ev">The <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.OnEscaped(Exiled.API.Features.Player)">
            <summary>
            Fired after the player escapes.
            </summary>
            <param name="player">The player who escaped.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.TryGetValidTarget(System.Func{Exiled.API.Features.Player,System.Boolean},System.Single,Exiled.API.Features.Player@)">
            <summary>
            Tries to get a valid target based on a specified condition.
            </summary>
            <param name="predicate">The condition.</param>
            <param name="distance">The maximum distance to reach.</param>
            <param name="target">The valid target.</param>
            <returns><see langword="true"/> if the target was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.TryGetValidTargets(System.Func{Exiled.API.Features.Player,System.Boolean},System.Single,System.Collections.Generic.List{Exiled.API.Features.Player}@)">
            <summary>
            Tries to get a valid target based on a specified condition.
            </summary>
            <param name="predicate">The condition.</param>
            <param name="distance">The maximum distance to reach.</param>
            <param name="players">The valid targets.</param>
            <returns><see langword="true"/> if targets were found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.PreventTakingDamageFromScps(Exiled.Events.EventArgs.Player.HurtingEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnHurting(Exiled.Events.EventArgs.Player.HurtingEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.IgnoreDamage(Exiled.Events.EventArgs.Player.HurtingEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnHurting(Exiled.Events.EventArgs.Player.HurtingEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.ChangingItemBehaviour(Exiled.Events.EventArgs.Player.ChangingItemEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnChangingItem(Exiled.Events.EventArgs.Player.ChangingItemEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.AllowDamage(Exiled.Events.EventArgs.Player.HurtingEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnHurting(Exiled.Events.EventArgs.Player.HurtingEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.PreventDealingDamageToScps(Exiled.Events.EventArgs.Player.HurtingEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnHurting(Exiled.Events.EventArgs.Player.HurtingEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.DestroyOnLeave(Exiled.Events.EventArgs.Player.DestroyingEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnDestroying(Exiled.Events.EventArgs.Player.DestroyingEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.HandcuffingBehavior(Exiled.Events.EventArgs.Player.HandcuffingEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnHandcuffing(Exiled.Events.EventArgs.Player.HandcuffingEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.DestroyOnChangingRole(Exiled.Events.EventArgs.Player.ChangingRoleEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnChangingGroup(Exiled.Events.EventArgs.Player.ChangingGroupEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.OverrideSpawnPoint(Exiled.Events.EventArgs.Player.SpawningEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnSpawning(Exiled.Events.EventArgs.Player.SpawningEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.PickingUpItemBehavior(Exiled.Events.EventArgs.Player.SearchingPickupEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnSearchPickupRequest(Exiled.Events.EventArgs.Player.SearchingPickupEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.PreventPlayerFromEscaping(Exiled.Events.EventArgs.Player.EscapingEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnEscaping(Exiled.Events.EventArgs.Player.EscapingEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.AnnounceOwnerDeath(Exiled.Events.EventArgs.Player.DiedEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnDied(Exiled.Events.EventArgs.Player.DiedEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.IntercomSpeakingBehavior(Exiled.Events.EventArgs.Player.IntercomSpeakingEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnIntercomSpeaking(Exiled.Events.EventArgs.Player.IntercomSpeakingEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.EnteringPocketDimensionBehavior(Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnEnteringPocketDimension(Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.VoiceChattingBehavior(Exiled.Events.EventArgs.Player.VoiceChattingEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnVoiceChatting(Exiled.Events.EventArgs.Player.VoiceChattingEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.PlacingBloodBehavior(Exiled.Events.EventArgs.Map.PlacingBloodEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Map.OnPlacingBlood(Exiled.Events.EventArgs.Map.PlacingBloodEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.DroppingItemBehavior(Exiled.Events.EventArgs.Player.DroppingItemEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnEnteringPocketDimension(Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.ActivatingWarheadBehavior(Exiled.Events.EventArgs.Player.ActivatingWarheadPanelEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnActivatingWarheadPanel(Exiled.Events.EventArgs.Player.ActivatingWarheadPanelEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.ActivatingGeneratorBehavior(Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnActivatingGenerator(Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.ActivatingWorkstationBehavior(Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnActivatingWorkstation(Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.InteractingElevatorBehavior(Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnInteractingElevator(Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.CheckpointsBehavior(Exiled.Events.EventArgs.Player.InteractingDoorEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnInteractingDoor(Exiled.Events.EventArgs.Player.InteractingDoorEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.InteractingDoorBehavior(Exiled.Events.EventArgs.Player.InteractingDoorEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnInteractingDoor(Exiled.Events.EventArgs.Player.InteractingDoorEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.OnInternalChangingNickname(Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnChangingNickname(Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs)"/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour.OnSpawningRagdoll(Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnSpawningRagdoll(Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs)"/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings">
            <summary>
            A tool to easily setup roles.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.Default">
            <summary>
            Gets the default <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings"/> values.
            <para>It refers to the base-game human roles behavior.</para>
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.ScpPreset">
            <summary>
            Gets the SCP preset referring to the base-game SCPs behavior.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.IsRoleDynamic">
            <summary>
            Gets or sets a value indicating whether the player's role is dynamic.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.UseDefaultRoleOnly">
            <summary>
            Gets or sets a value indicating whether the player's role should use the specified <see cref="T:Exiled.API.Features.Roles.Role"/> only.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.ConsoleMessage">
            <summary>
            Gets or sets a <see cref="T:System.String"/> for the console message given to players when they receive a role.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.Health">
            <summary>
            Gets or sets the initial health.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.MaxHealth">
            <summary>
            Gets or sets the max health.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.ArtificialHealth">
            <summary>
            Gets or sets the initial artificial health.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.MaxArtificialHealth">
            <summary>
            Gets or sets the max artificial health.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.SpawnedText">
            <summary>
            Gets or sets the text to be displayed as soon as the role is assigned.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.SpawnProperties">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Spawn.SpawnProperties"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.UniqueRole">
            <summary>
            Gets or sets the unique <see cref="T:PlayerRoles.RoleTypeId"/> defining the role to be assigned.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.PreservePosition">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> assignment should maintain the player's current position.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.SpawnFlags">
            <summary>
            Gets or sets the <see cref="T:PlayerRoles.RoleSpawnFlags"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.SpawnReason">
            <summary>
            Gets or sets the <see cref="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.SpawnReason"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.PreserveInventory">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> assignment should maintain the player's current inventory.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.DynamicRoles">
            <summary>
            Gets or sets a <see cref="T:PlayerRoles.RoleTypeId"/>[] containing all dynamic roles.
            <para>Dynamic roles are specific roles that, if assigned, do not result in the removal of the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> from the player.</para>
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.IgnoredDamageTypes">
            <summary>
            Gets or sets a <see cref="T:Exiled.API.Enums.DamageType"/>[] containing all the ignored damage types.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.AllowedDamageTypes">
            <summary>
            Gets or sets a <see cref="T:Exiled.API.Enums.DamageType"/>[] containing all the allowed damage types.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.BypassableDoors">
            <summary>
            Gets or sets a <see cref="T:Exiled.API.Enums.DoorType"/>[] containing all doors that can be bypassed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.FriendlyFireMultiplier">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing cached <see cref="T:System.String"/> and their  <see cref="T:System.Collections.Generic.Dictionary`2"/> which is cached Role with FF multiplier.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanHurtScps">
            <summary>
            Gets or sets a value indicating whether SCPs can be hurt.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanBeHurtByScps">
            <summary>
            Gets or sets a value indicating whether SCPs can hurt the owner.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanEnterPocketDimension">
            <summary>
            Gets or sets a value indicating whether the owner can enter pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanUseIntercom">
            <summary>
            Gets or sets a value indicating whether the owner can use intercom.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanUseVoiceChat">
            <summary>
            Gets or sets a value indicating whether the owner can use the voicechat.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanPlaceBlood">
            <summary>
            Gets or sets a value indicating whether the owner can place blood.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanBeHandcuffed">
            <summary>
            Gets or sets a value indicating whether the owner can be handcuffed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanUseElevators">
            <summary>
            Gets or sets a value indicating whether the owner can use elevators.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanBypassCheckpoints">
            <summary>
            Gets or sets a value indicating whether the owner can bypass checkpoints.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanActivateWarhead">
            <summary>
            Gets or sets a value indicating whether the owner can activate warhead.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanActivateWorkstations">
            <summary>
            Gets or sets a value indicating whether the owner can activate workstations.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanActivateGenerators">
            <summary>
            Gets or sets a value indicating whether the owner can activate generators.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanPickupItems">
            <summary>
            Gets or sets a value indicating whether the owner can pickup items.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanDropItems">
            <summary>
            Gets or sets a value indicating whether the owner can drop items.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CanSelectItems">
            <summary>
            Gets or sets a value indicating whether the owner can select items from their inventory.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.DoesLookingAffectScp173">
            <summary>
            Gets or sets a value indicating whether the owner can look at Scp173.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.DoesLookingAffectScp096">
            <summary>
            Gets or sets a value indicating whether the owner can trigger Scp096.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.CustomInfo">
            <summary>
            Gets or sets the custom info.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.HideInfoArea">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:PlayerInfoArea"/> should be hidden.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.IsDeathAnnouncementEnabled">
            <summary>
            Gets or sets a value indicating whether the C.A.S.S.I.E death announcement should be played when the owner dies.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.UnknownTerminationCauseAnnouncement">
            <summary>
            Gets or sets the C.A.S.S.I.E announcement to be played when the owner dies from an unhandled or unknown termination cause.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.KilledByRoleAnnouncements">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all the C.A.S.S.I.E announcements
            to be played when the owner gets killed by a player with the corresponding <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.KilledByCustomRoleAnnouncements">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all the C.A.S.S.I.E announcements
            to be played when the owner gets killed by a player with the corresponding <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.KilledByTeamAnnouncements">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all the C.A.S.S.I.E announcements
            to be played when the owner gets killed by a player belonging to the corresponding <see cref="T:PlayerRoles.Team"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.CustomRoles.RoleSettings.KilledByCustomTeamAnnouncements">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all the C.A.S.S.I.E announcements
            to be played when the owner gets killed by a player belonging to the corresponding <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.CustomRoles.SummaryInfo">
            <summary>
            A tool to easily manage summary info.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.CustomRoles.SummaryInfo.FoundationForces">
            <summary>
            The foundation forces.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.CustomRoles.SummaryInfo.ChaosInsurgency">
            <summary>
            The Chaos Insurgency forces.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.CustomRoles.SummaryInfo.Anomalies">
            <summary>
            The anomalies.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.CustomRoles.SummaryInfo.Neutral">
            <summary>
            The neutral forces.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.SummaryInfo.GetSummary">
            <summary>
            Gets the current summary.
            </summary>
            <returns>The current summary.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.CustomRoles.SummaryInfo.Update">
            <summary>
            Updates the summary.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.Generic.ModulePointer`1">
            <summary>
            Represents a marker class for a module's pointer.
            </summary>
            <typeparam name="TModule">The type of the module this configuration belongs to.</typeparam>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.ModulePointer`1.Get``1(Exiled.CustomModules.API.Features.CustomModule,System.Reflection.Assembly)">
            <summary>
            Gets the module pointer for the specified custom module and assembly with a target module type.
            </summary>
            <typeparam name="TTargetModule">The type of the target module.</typeparam>
            <param name="customModule">The custom module to get the pointer for.</param>
            <param name="assembly">The assembly to search for the module pointer. If null, the calling assembly is used.</param>
            <returns>The module pointer for the specified custom module and target module type, or null if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.ModulePointer`1.Get``1(Exiled.CustomModules.API.Features.CustomModule)">
            <summary>
            Gets the module pointer for the specified custom module from the calling assembly with a target module type.
            </summary>
            <typeparam name="TTargetModule">The type of the target module.</typeparam>
            <param name="customModule">The custom module to get the pointer for.</param>
            <returns>The module pointer for the specified custom module and target module type, or null if not found.</returns>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.Generic.TrackerBase`1">
            <summary>
            The actor which handles all tracking-related tasks for items.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Exiled.CustomModules.API.Interfaces.ITrackable"/>.</typeparam>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.ItemAddedDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired when an item is added.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.ItemRemovedDispatcher">
            <summary>
            Gets or sets  the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired when an item is removed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.ItemRestoredDispatcher">
            <summary>
            Gets or sets  the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired when an item is restored.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.ItemTrackingModifiedDispatcher">
            <summary>
            Gets or sets  the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired when an item tracking is modified.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.PickupAddedDispatcher">
            <summary>
            Gets or sets  the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired when a pickup is added.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.PickupRemovedDispatcher">
            <summary>
            Gets or sets  the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired when a pickup is removed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.PickupRestoredDispatcher">
            <summary>
            Gets or sets  the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired when a pickup is restored.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.PickupTrackingModifiedDispatcher">
            <summary>
            Gets or sets  the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired when a pickup tracking is modified.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.TrackedItemSerials">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all serials and their corresponding <typeparamref name="T"/> items.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.TrackedPickupSerials">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all serials and their corresponding <typeparamref name="T"/> items.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.AddOrTrack(Exiled.API.Features.Items.Item)">
            <summary>
            Adds or tracks the trackables of an item based on its serial.
            </summary>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> whose trackables are to be added or tracked.</param>
            <returns><see langword="true"/> if the item was added or tracked successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.AddOrTrack(Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Adds or tracks the trackables of a pickup based on its serial.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> whose trackables are to be added or tracked.</param>
            <returns><see langword="true"/> if the pickup was added or tracked successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.AddOrTrack(System.Object[])">
            <summary>
            Adds or tracks the trackables of both pickups and items based on their serial.
            </summary>
            <param name="objects">The objects whose trackables are to be added or tracked.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.Restore(System.UInt16,Exiled.API.Features.Items.Item)">
            <summary>
            Restores all trackables from a pickup which is being tracked.
            </summary>
            <param name="serial">The serial to restore all trackables from.</param>
            <param name="item">The item to reapply the trackables to.</param>
            <returns><see langword="true"/> if the pickup was restored successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.Restore(Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Restores all trackables from a pickup which is being tracked.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> whose trackables are to be restored.</param>
            <returns><see langword="true"/> if the pickup was restored successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.Restore(Exiled.API.Features.Pickups.Pickup,Exiled.API.Features.Items.Item)">
            <summary>
            Restores all trackables from a pickup which is being tracked.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> whose trackables are to be restored.</param>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> whose trackables are to be transfered.</param>
            <returns><see langword="true"/> if the pickup was restored successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.Restore(Exiled.API.Features.Items.Item,Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Restores all trackables from a item which is being tracked.
            </summary>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> whose trackables are to be restored.</param>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> whose trackables are to be transfered.</param>
            <returns><see langword="true"/> if the item was restored successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.Remove(Exiled.API.Features.Items.Item)">
            <summary>
            Removes an item and all its trackables from the tracking.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.Remove(Exiled.API.Features.Items.Item,`0)">
            <summary>
            Removes an ability from the tracking.
            </summary>
            <param name="item">The item owning the ability.</param>
            <param name="behaviour">The <see cref="T:Exiled.CustomModules.API.Interfaces.ITrackable"/> to be removed.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.Remove(Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Removes a pickup and all its trackables from the tracking.
            </summary>
            <param name="pickup">The pickup to be removed.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.Remove(Exiled.API.Features.Pickups.Pickup,`0)">
            <summary>
            Removes an ability from the tracking.
            </summary>
            <param name="pickup">The pickup owning the ability.</param>
            <param name="behaviour">The <typeparamref name="T"/> to be removed.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.Remove(System.UInt16,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes an item or pickup with the specified serial number from the tracking.
            </summary>
            <param name="serial">The serial number of the item or pickup to be removed.</param>
            <param name="behaviours">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/> containing all <see cref="T:Exiled.CustomModules.API.Interfaces.ITrackable"/> items to be removed.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.IsTracked(Exiled.API.Features.Items.Item)">
            <summary>
            Checks if an item is being tracked.
            </summary>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> to check.</param>
            <returns><see langword="true"/> if the item is being tracked; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.IsTracked(Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Checks if a pickup is being tracked.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> to check.</param>
            <returns><see langword="true"/> if the pickup is being tracked; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.GetTrackedValues(Exiled.API.Features.Items.Item)">
            <summary>
            Gets the tracked values associated with the specified item.
            </summary>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> to retrieve tracked values from.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the tracked values associated with the item.
            If the item is not tracked, returns an empty collection.
            </returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.GetTrackedValues(Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Gets the tracked values associated with the specified pickup.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> to retrieve tracked values from.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the tracked values associated with the pickup.
            If the pickup is not tracked, returns an empty collection.
            </returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.OnDroppingItem(Exiled.Events.EventArgs.Player.DroppingItemEventArgs)">
            <summary>
            Handles the event when a player is dropping an item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DroppingItemEventArgs"/> containing information about the dropping item.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.OnDroppedItem(Exiled.Events.EventArgs.Player.DroppedItemEventArgs)">
            <summary>
            Handles the event when an item is dropped.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DroppedItemEventArgs"/> containing information about the dropped item.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.OnItemAdded(Exiled.Events.EventArgs.Player.ItemAddedEventArgs)">
            <summary>
            Handles the event when an item is added.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ItemAddedEventArgs"/> containing information about the added item.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.OnItemRemoved(Exiled.Events.EventArgs.Player.ItemRemovedEventArgs)">
            <summary>
            Handles the event when a tracked item or pickup is removed from a player's inventory.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.PickupDestroyedEventArgs"/> containing information about the removed item.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.OnPickupDestroyed(Exiled.Events.EventArgs.Map.PickupDestroyedEventArgs)">
            <summary>
            Handles the event when a tracked item or pickup is destroyed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.PickupDestroyedEventArgs"/> containing information about the destroyed pickup.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Generic.TrackerBase`1.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.Inventory.IInventorySettings">
            <summary>
            Defines the contract for config features related to inventory management.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Inventory.IInventorySettings.Items">
            <summary>
            Gets or sets the items to be given.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Inventory.IInventorySettings.CustomItems">
            <summary>
            Gets or sets the custom items to be given.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Inventory.IInventorySettings.AmmoBox">
            <summary>
            Gets or sets the ammo box settings to be applied.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Inventory.IInventorySettings.CustomAmmoBox">
            <summary>
            Gets or sets the custom ammo box settings to be applied.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.Inventory.InventoryManager">
            <summary>
            Manages the inventory settings for human players, providing a convenient interface for customization.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Inventory.InventoryManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Features.Inventory.InventoryManager"/> class.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Inventory.InventoryManager.#ctor(System.Collections.Generic.List{ItemType},System.Collections.Generic.List{System.Object},System.Collections.Generic.Dictionary{Exiled.API.Enums.AmmoType,System.UInt16},System.Collections.Generic.Dictionary{System.UInt32,System.UInt16})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Features.Inventory.InventoryManager"/> class.
            </summary>
            <param name="inventory">The list of items to be given.</param>
            <param name="customItems">The list of custom items to be given.</param>
            <param name="ammoBox">The ammo box settings to be applied.</param>
            <param name="customAmmoBox">The custom ammo box settings to be applied.</param>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Inventory.InventoryManager.Items">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Inventory.InventoryManager.CustomItems">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Inventory.InventoryManager.AmmoBox">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Inventory.InventoryManager.CustomAmmoBox">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Inventory.InventoryManager.Chance">
            <summary>
            Gets or sets the probability associated with this inventory slot.
            <br>Useful for inventory tweaks involving one or more probability values.</br>
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.ModuleBehaviour`1">
            <summary>
            Represents a marker class for a module's pointer.
            </summary>
            <typeparam name="TEntity">The type of the entity to which the module behaviour is applied.</typeparam>
            <remarks>
            This abstract class serves as a foundation for user-defined module behaviours that can be applied to entities (such as playable characters)
            to extend and customize their functionality through custom modules. It provides a modular and extensible architecture for enhancing gameplay elements.
            </remarks>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ModuleBehaviour`1.Config">
            <summary>
            Gets or sets the behaviour's configs.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ModuleBehaviour`1.ImplementConfigs">
            <summary>
            Implements the behaviour's configs by copying properties from the config object to the current instance.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ModuleBehaviour`1.ApplyConfig(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            Applies a configuration property value from the source property to the target property.
            </summary>
            <param name="propertyInfo">The source property from the config object.</param>
            <param name="targetInfo">The target property in the current instance.</param>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.ModuleInfo">
            <summary>
            A struct containing all information about a module.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.ModuleInfo.ENABLE_ALL_CALLBACK">
            <summary>
            The name of the method which enables all the module instances.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.ModuleInfo.DISABLE_ALL_CALLBACK">
            <summary>
            The name of the method which disables all the module instances.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.ModuleInfo.SIGNATURE_BINDINGS">
            <summary>
            The binding flags for identifying the registration handlers.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.ModuleInfo.AllModules">
            <summary>
            All known modules information.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.ModuleInfo.Type">
            <summary>
            The <see cref="F:Exiled.CustomModules.API.Features.ModuleInfo.Type"/> of the module.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.ModuleInfo.IsCurrentlyLoaded">
            <summary>
            A value indicating whether the module is currently loaded.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.ModuleInfo.ModuleType">
            <summary>
            The module identifier.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.ModuleInfo.EnableAll_Callback">
            <summary>
            Callback method for enabling all instances of the module.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.ModuleInfo.DisableAll_Callback">
            <summary>
            Callback method for disabling all instances of the module.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ModuleInfo.Name">
            <summary>
            Gets the module <see cref="F:Exiled.CustomModules.API.Features.ModuleInfo.Type"/>'s name.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ModuleInfo.Get(System.Type)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.ModuleInfo"/> instance based on the module type or name.
            </summary>
            <param name="type">The module type to look for.</param>
            <returns>The corresponding <see cref="T:Exiled.CustomModules.API.Features.ModuleInfo"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ModuleInfo.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.ModuleInfo"/> instance based on the module type or name.
            </summary>
            <param name="name">The module type's name to look for.</param>
            <returns>The corresponding <see cref="T:Exiled.CustomModules.API.Features.ModuleInfo"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ModuleInfo.Get(System.UInt32)">
            <summary>
            Gets a <see cref="T:Exiled.CustomModules.API.Features.ModuleInfo"/> instance based on the module type or name.
            </summary>
            <param name="moduleType">The module type's id to look for.</param>
            <returns>The corresponding <see cref="T:Exiled.CustomModules.API.Features.ModuleInfo"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ModuleInfo.InvokeCallback(System.String,System.Reflection.Assembly)">
            <summary>
            Invokes a module callback by name, enabling or disabling module instances based on the specified assembly.
            </summary>
            <param name="name">The name of the callback to invoke ("EnableAll" or "DisableAll").</param>
            <param name="assembly">The assembly to pass to the callback method.</param>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.ModulePointer">
            <summary>
            Represents a marker class for a module's pointer.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.ModulePointer.Id">
            <summary>
            Gets or sets the module's id the <see cref="T:Exiled.CustomModules.API.Features.ModulePointer"/> is pointing to.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ModulePointer.Get(Exiled.CustomModules.API.Features.CustomModule,System.Reflection.Assembly)">
            <summary>
            Gets the module pointer for the specified custom module and assembly.
            </summary>
            <param name="customModule">The custom module to get the pointer for.</param>
            <param name="assembly">The assembly to search for the module pointer. If null, the calling assembly is used.</param>
            <returns>The module pointer for the specified custom module, or null if not found.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.ModulePointer.Get(Exiled.CustomModules.API.Features.CustomModule)">
            <summary>
            Gets the module pointer for the specified custom module from the calling assembly.
            </summary>
            <param name="customModule">The custom module to get the pointer for.</param>
            <returns>The module pointer for the specified custom module, or null if not found.</returns>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.Pawn">
            <summary>
            Represents an in-game player by encapsulating a <see cref="T:ReferenceHub"/>, providing an extended feature set through the <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> class.
            <para>
            The <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> class enhances the functionality of the base <see cref="T:Exiled.API.Features.Player"/> class, introducing additional features and capabilities.
            <br>This class is designed to be used seamlessly alongside existing methods that expect a <see cref="T:Exiled.API.Features.Player"/> as a parameter, allowing for compatibility with the existing codebase.</br>
            <para>The use of nullable context is enabled to prevent users from inadvertently passing or interacting with <see langword="null"/> references.</para>
            </para>
            <remarks>
            Developers can leverage the enhanced functionality provided by the <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> class while benefiting from the familiar interface of the <see cref="T:Exiled.API.Features.Player"/> class.
            <br>It serves as a comprehensive representation of an in-game entity, encapsulating the associated <see cref="T:ReferenceHub"/> with an expanded set of features.</br>
            </remarks>
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> class.
            </summary>
            <param name="referenceHub">The <see cref="T:ReferenceHub"/> of the player to be encapsulated.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.#ctor(UnityEngine.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> class.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> of the player.</param>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.ModuleBehaviours">
            <summary>
            Gets all pawn's <see cref="T:Exiled.CustomModules.API.Features.ModuleBehaviour`1"/>'s.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.CustomRole">
            <summary>
            Gets the pawn's <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            <para/>
            Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.CustomTeam">
            <summary>
            Gets the pawn's <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomTeam"/>.
            <para/>
            Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.CustomEscape">
            <summary>
            Gets the pawn's <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.CustomEscape"/>.
            <para/>
            Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.CurrentCustomItem">
            <summary>
            Gets the pawn's current <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.
            <para/>
            Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.CustomAbilities">
            <summary>
            Gets the pawn's custom abilities.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.AbilityBehaviours">
            <summary>
            Gets the pawn's ability behaviours.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.RoleBehaviour">
            <summary>
            Gets the pawn's <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.RoleBehaviour"/>.
            <para/>
            Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.EscapeBehaviour">
            <summary>
            Gets the pawn's <see cref="T:Exiled.CustomModules.API.Features.CustomEscapes.EscapeBehaviour"/>.
            <para/>
            Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.CustomAmmoBox">
            <summary>
            Gets the pawn's custom ammo box containing.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.SelectedAbility">
            <summary>
            Gets the selected <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.SelectedAbilityBehaviour">
            <summary>
            Gets or sets the selected <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.AbilityBehaviourBase`1"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.HasCustomRole">
            <summary>
            Gets a value indicating whether the pawn has a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.IsScp">
            <summary>
            Gets a value indicating whether the pawn is any SCP, including custom ones.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.GlobalRole">
            <summary>
            Gets the global role of the pawn.
            <para/>
            It will return a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> if available, or the <see cref="T:Exiled.API.Features.Roles.Role"/> if null.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.GlobalItems">
            <summary>
            Gets the global items associated with the pawn.
            <para/>
            It will return a combination of standard <see cref="T:Exiled.API.Features.Items.Item"/>s and <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>s.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.GlobalCurrentItem">
            <summary>
            Gets or sets the global current item of the pawn.
            <para/>
            If a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> is equipped, it returns the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>; otherwise, it returns the regular <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.IsCustomScp">
            <summary>
            Gets a value indicating whether the pawn is any custom SCP.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.CustomItems">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Object"/> containing all custom items in the pawn's inventory.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Object"/> which contains all found custom items.</returns>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.Pawn.EffectTypes">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.EffectType"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.EffectType"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.HasCustomItem``1">
            <summary>
            Gets a value indicating whether the pawn has the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> of the specified type.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>.</typeparam>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> of the specified type was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.HasCustomAbility``1">
            <summary>
            Gets a value indicating whether the pawn has the <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> of the specified type.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/>.</typeparam>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.PlayerAbilities.PlayerAbility"/> of the specified type was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.TryGetCustomItem``1(``0@)">
            <summary>
            Tries to get the first <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> of the specified type from the collection of custom items.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> to retrieve.</typeparam>
            <param name="customItem">The output parameter that will contain the retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>, if found.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> of the specified type was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.TryGetCustomRole``1(``0@)">
            <summary>
            Tries to get the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> of the specified type from the <see cref="T:Exiled.CustomModules.API.Features.Pawn"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> to retrieve.</typeparam>
            <param name="customRole">The output parameter that will contain the retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>, if found.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> of the specified type was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.TryGetCustomAbility``1(``0@)">
            <summary>
            Tries to get the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> of the specified type from the player's abilities.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> to retrieve.</typeparam>
            <param name="customAbility">The output parameter that will contain the retrieved <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/>, if found.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility`1"/> of the specified type was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.AddItem(System.Object)">
            <summary>
            Add an <see cref="T:Exiled.API.Features.Items.Item"/> or <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> of the specified type to the pawn's inventory.
            </summary>
            <param name="item">The item to be added.</param>
            <returns><see langword="true"/> if the item has been given to the pawn; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.AddItem(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Object"/> containing all the custom items to the pawn's inventory.
            </summary>
            <param name="customItems">The custom items to be added.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.SetRole(System.Object,System.Boolean,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Sets the pawn's role.
            </summary>
            <param name="role">The role to be set.</param>
            <param name="preservePlayerPosition">A value indicating whether the <see cref="T:Exiled.CustomModules.API.Features.Pawn"/> should be spawned in the same position.</param>
            <param name="spawnReason">The <see cref="T:Exiled.API.Enums.SpawnReason"/> to be set.</param>
            <param name="roleSpawnFlags">The <see cref="T:PlayerRoles.RoleSpawnFlags"/> to be set.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.DropItem(Exiled.API.Features.Items.Item)">
            <summary>
            Safely drops an item.
            </summary>
            <param name="item">The item to be dropped.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.GetAmmo(System.UInt32)">
            <summary>
            Gets the ammo count of a specified custom ammo in a pawn's inventory.
            </summary>
            <param name="customAmmoType">The custom ammo to be searched for in the pawn's inventory.</param>
            <returns>The specified custom ammo count.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.AddAmmo(System.UInt32,System.UInt16)">
            <summary>
            Adds an amount of custom ammo to the pawn's ammo box.
            </summary>
            <param name="id">The type of the custom ammo.</param>
            <param name="amount">The amount to be added.</param>
            <returns><see langword="true"/> if the specified amount of ammo was given entirely or partially; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.RemoveAmmo(System.UInt32,System.UInt16)">
            <summary>
            Removes an amount of custom ammo from the pawn's ammo box.
            </summary>
            <param name="id">The type of the custom ammo.</param>
            <param name="amount">The amount to be removed.</param>
            <returns><see langword="true"/> if the specified amount of ammo was removed entirely or partially; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.Pawn.SetAmmo(System.UInt32,System.UInt16)">
            <summary>
            Sets the amount of a specified custom ammo to the pawn's inventory.
            </summary>
            <param name="id">The type of the custom ammo.</param>
            <param name="amount">The amount of ammo to be set.</param>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.RespawnManager">
            <summary>
            The actor which handles all team respawning tasks for roles.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RespawnManager.SelectingCustomTeamRespawnDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all delegates to be fired when selecting the next known team.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RespawnManager.NextKnownTeam">
            <summary>
            Gets or sets the next known team.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RespawnManager.PreviousKnownTeam">
            <summary>
            Gets or sets the previous spawned team.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RespawnManager.AllTickets">
            <summary>
            Gets all teams' tickets.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RespawnManager.EnqueuedRoles">
            <summary>
            Gets all enqueued roles.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RespawnManager.ForceSpawn(System.Object)">
            <summary>
            Forces the spawn of a wave of the specified team.
            </summary>
            <param name="value">The specified team.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RespawnManager.Spawn">
            <summary>
            Spawns the <see cref="P:Exiled.CustomModules.API.Features.RespawnManager.NextKnownTeam"/> wave.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RespawnManager.PostInitialize_Static">
            <inheritdoc />
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RespawnManager.EndPlay_Static">
            <inheritdoc />
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RespawnManager.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RespawnManager.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.RoleAssigner">
            <summary>
            The actor which handles all role assignment tasks for roles.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RoleAssigner.AssigningHumanCustomRolesDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before assigning human roles.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RoleAssigner.AssigningScpCustomRolesDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired before assigning SCP roles.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RoleAssigner.EnqueuedScps">
            <summary>
            Gets or sets all enqueued SCPs.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RoleAssigner.EnqueuedHumans">
            <summary>
            Gets or sets all enqueued humans.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RoleAssigner.EnqueuedPlayers">
            <summary>
            Gets or sets all enqueued players.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RoleAssigner.HumanRolesQueue">
            <summary>
            Gets or sets the human roles queue.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RoleAssigner.NextHumanRoleToSpawn">
            <summary>
            Gets the next human role to spawn from the Queue.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RoleAssigner.FilterHumans">
            <summary>
            Gets a filter to retrieve all available human custom roles.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.RoleAssigner.FilterScps">
            <summary>
            Gets a filter to retrieve all available SCP custom roles.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RoleAssigner.SpawnHumans(PlayerRoles.Team[],System.Int32)">
            <summary>
            Spawns human players based on the provided queue of teams and the length of the queue.
            </summary>
            <param name="queue">An array of teams representing the queue of teams to spawn.</param>
            <param name="queueLength">The length of the queue.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RoleAssigner.SpawnScps(System.Int32)">
            <summary>
            Spawns SCPs based on the target SCP number.
            </summary>
            <param name="targetScpNumber">The target number of SCPs to spawn.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RoleAssigner.DistributeOrEnqueue(System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.Pawn},System.Collections.Generic.List{System.UInt32},System.Func{Exiled.CustomModules.API.Features.CustomRoles.CustomRole,System.Boolean})">
            <summary>
            Distributes the given roles to all specified players based on a predicate.
            <para/>
            If a role cannot be assigned due to some circumstances, it will be enqueued until a new role is found.
            </summary>
            <param name="players">The players to assign the roles to.</param>
            <param name="roles">The roles to be assigned.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RoleAssigner.DistributeOrEnqueue(System.Collections.Generic.List{ReferenceHub},System.Collections.Generic.IEnumerable{System.UInt32},System.Func{Exiled.CustomModules.API.Features.CustomRoles.CustomRole,System.Boolean})">
            <summary>
            Distributes the given roles to all specified players based on a predicate.
            <para/>
            If a role cannot be assigned due to some circumstances, it will be enqueued until a new role is found.
            </summary>
            <param name="players">The players to assign the roles to.</param>
            <param name="roles">The roles to be assigned.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RoleAssigner.FindAvailableRole(System.Func{Exiled.CustomModules.API.Features.CustomRoles.CustomRole,System.Boolean})">
            <summary>
            Finds an available <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> based on a predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The first available <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RoleAssigner.FindAvailableRole(System.Collections.Generic.List{Exiled.CustomModules.API.Features.CustomRoles.CustomRole})">
            <summary>
            Finds the first available <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/> in the specified list.
            </summary>
            <param name="toEvaluate">The list of roles to evaluate.</param>
            <returns>The first available <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RoleAssigner.GetCustomRolesByProbability(System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Features.CustomRoles.CustomRole})">
            <summary>
            Gets all custom roles after evaluating their probability.
            </summary>
            <param name="customRoles">The custom roles to evaluate.</param>
            <returns>All evaluated custom roles.</returns>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RoleAssigner.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.RoleAssigner.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.API.Features.World">
            <summary>
            The world base.
            </summary>
        </member>
        <member name="F:Exiled.CustomModules.API.Features.World.DEFAULT_DEQUEUE_RATE">
            <summary>
            The default dequeue rate.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.World.GameState">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Features.CustomGameModes.GameState"/>.
            <para/>
            Requires <see cref="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomGameModes"/> to be enabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.World.DequeueRate">
            <summary>
            Gets or sets the dequeue rate, expressed in seconds.
            <para/>
            Requires <see cref="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomGameModes"/> to be enabled.
            <para/>
            If enqueued, the game mode will be continuously evaluated until it starts or the enqueued game mode changes.
            <br/>
            The <see cref="P:Exiled.CustomModules.API.Features.World.DequeueRate"/> defines the delay between each evaluation check.
            </summary>
            <seealso cref="F:Exiled.CustomModules.API.Features.World.DEFAULT_DEQUEUE_RATE"/>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.World.EnqueuedGameMode">
            <summary>
            Gets the enqueued game mode.
            <para/>
            Requires <see cref="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomGameModes"/> to be enabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.World.RunningGameMode">
            <summary>
            Gets or sets the running game mode.
            <para/>
            Requires <see cref="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomGameModes"/> to be enabled.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.API.Features.World.SummaryInfo">
            <summary>
            Gets the current summary info.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.World.EnqueueGameMode(Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode,System.Boolean)">
            <summary>
            Enqueues a custom game mode for execution.
            <para/>
            Requires <see cref="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomGameModes"/> to be enabled.
            </summary>
            <param name="customGameMode">The custom game mode to enqueue.</param>
            <param name="continuously">Whether to continuously enqueue the game mode.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.World.EnqueueGameMode(System.Object,System.Boolean)">
            <summary>
            Enqueues a custom game mode by its ID for execution.
            <para/>
            Requires <see cref="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomGameModes"/> to be enabled.
            </summary>
            <param name="id">The ID of the custom game mode to enqueue.</param>
            <param name="continuously">Whether to continuously enqueue the game mode.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.World.ClearQueue">
            <summary>
            Clears the current game mode queue.
            <para/>
            Requires <see cref="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomGameModes"/> to be enabled.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.World.Start(Exiled.CustomModules.API.Features.CustomGameModes.CustomGameMode,System.Boolean)">
            <summary>
            Starts the execution of the enqueued game mode.
            <para/>
            Requires <see cref="F:Exiled.CustomModules.API.Enums.UUModuleType.CustomGameModes"/> to be enabled.
            </summary>
            <param name="customGameMode">The custom game mode to start.</param>
            <param name="isForced">Whether to force-start the game mode.</param>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.World.PostInitialize_Static">
            <inheritdoc />
        </member>
        <member name="M:Exiled.CustomModules.API.Features.World.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.API.Features.World.EndPlay_Static">
            <inheritdoc />
        </member>
        <member name="M:Exiled.CustomModules.API.Features.World.SubscribeEvents">
            <inheritdoc />
        </member>
        <member name="M:Exiled.CustomModules.API.Features.World.UnsubscribeEvents">
            <inheritdoc />
        </member>
        <member name="T:Exiled.CustomModules.API.Interfaces.ITrackable">
            <summary>
            Represents a marker interface for trackable behaviors.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.Config">
            <summary>
            The plugin's config.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Config.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Config.Debug">
            <summary>
            Gets or sets a value indicating whether debug messages should be printed to the console.
            </summary>
            <returns><see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="P:Exiled.CustomModules.Config.UseDefaultRoleAssigner">
            <summary>
            Gets or sets a value indicating whether the built-in role assigner should be used over the base game one.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Config.UseDefaultRespawnManager">
            <summary>
            Gets or sets a value indicating whether the built-in respawn manager should be used over the base game one.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Config.UseAutomaticModulesLoader">
            <summary>
            Gets or sets a value indicating whether the automatic modules loader should be used.
            <para/>
            It iterates over all existing plugins trying to enable all the modules for each plugin's assembly.
            <br/>
            It negatively affects the performance in case of the presence of a big amount of plugins.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Config.Modules">
            <summary>
            Gets or sets all modules to be loaded.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.CustomModules">
            <summary>
            Handles all custom role API functions.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.CustomModules.Instance">
            <summary>
            Gets a static reference to the plugin's instance.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.CustomModules.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.CustomModules.PlayerHandler">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.EventHandlers.PlayerHandler"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.CustomModules.ServerHandler">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.EventHandlers.ServerHandler"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.CustomModules.RegistrationHandler">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.EventHandlers.RegistrationHandler"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.CustomModules.IsModuleLoaded(Exiled.CustomModules.API.Enums.UUModuleType)">
            <summary>
            Gets a value indicating whether the specified module is loaded.
            </summary>
            <param name="module">The module to check.</param>
            <returns><see langword="true"/> if the module is loaded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.CustomModules.CustomModules.OnEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.CustomModules.OnDisabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.CustomModules.SubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.CustomModules.CustomModules.UnsubscribeEvents">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.EventHandlers.PlayerHandler">
            <summary>
            Handles <see cref="T:Exiled.API.Features.Player"/> events.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.EventHandlers.PlayerHandler.OnChangingItem(Exiled.Events.EventArgs.Player.ChangingItemEventArgs)">
            <inheritdoc cref="T:Exiled.Events.EventArgs.Player.ChangingItemEventArgs"/>
        </member>
        <member name="T:Exiled.CustomModules.EventHandlers.RegistrationHandler">
            <summary>
            Handles the all the module's registration.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.EventHandlers.RegistrationHandler.#ctor(Exiled.CustomModules.Config)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.EventHandlers.RegistrationHandler"/> class.
            </summary>
            <param name="inConfig">The configuration instance.</param>
        </member>
        <member name="M:Exiled.CustomModules.EventHandlers.RegistrationHandler.OnModuleEnabled(Exiled.CustomModules.API.Features.ModuleInfo)">
            <summary>
            Fired when a module gets enabled.
            </summary>
            <param name="moduleInfo">The module which is being enabled.</param>
        </member>
        <member name="M:Exiled.CustomModules.EventHandlers.RegistrationHandler.OnModuleDisabled(Exiled.CustomModules.API.Features.ModuleInfo)">
            <summary>
            Fired when a module gets disabled.
            </summary>
            <param name="moduleInfo">The module which is being disabled.</param>
        </member>
        <member name="T:Exiled.CustomModules.EventHandlers.ServerHandler">
            <summary>
            Handles <see cref="T:Exiled.API.Features.Server"/> events.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.EventHandlers.ServerHandler.OnRoundStarted">
            <inheritdoc cref="M:Exiled.Events.Handlers.Server.OnRoundStarted"/>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddedAbilityEventArgs`1">
            <summary>
            Contains all information after adding an ability.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Exiled.API.Features.Core.GameEntity"/>.</typeparam>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddedAbilityEventArgs`1.#ctor(`0,Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddedAbilityEventArgs`1"/> class.
            </summary>
            <param name="entity"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddedAbilityEventArgs`1.Entity"/></param>
            <param name="ability"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddedAbilityEventArgs`1.Ability"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddedAbilityEventArgs`1.Ability">
            <summary>
            Gets the added custom ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddedAbilityEventArgs`1.Entity">
            <summary>
            Gets the entity to which the custom ability has been added.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddingAbilityEventArgs`1">
            <summary>
            Contains all information before adding an ability.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Exiled.API.Features.Core.GameEntity"/>.</typeparam>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddingAbilityEventArgs`1.#ctor(`0,Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddingAbilityEventArgs`1"/> class.
            </summary>
            <param name="entity"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddingAbilityEventArgs`1.Entity"/></param>
            <param name="ability"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddingAbilityEventArgs`1.Ability"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddingAbilityEventArgs`1.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddingAbilityEventArgs`1.Ability">
            <summary>
            Gets the custom ability being added.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddingAbilityEventArgs`1.Entity">
            <summary>
            Gets the entity to which the custom ability is being added.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.AddingAbilityEventArgs`1.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovedAbilityEventArgs`1">
            <summary>
            Contains all information after removing an ability.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Exiled.API.Features.Core.GameEntity"/>.</typeparam>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovedAbilityEventArgs`1.#ctor(`0,Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovedAbilityEventArgs`1"/> class.
            </summary>
            <param name="entity"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovedAbilityEventArgs`1.Entity"/></param>
            <param name="ability"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovedAbilityEventArgs`1.Ability"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovedAbilityEventArgs`1.Ability">
            <summary>
            Gets the removed custom ability.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovedAbilityEventArgs`1.Entity">
            <summary>
            Gets the entity to which the custom ability has been removed.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovingAbilityEventArgs`1">
            <summary>
            Contains all information before removing an ability.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Exiled.API.Features.Core.GameEntity"/>.</typeparam>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovingAbilityEventArgs`1.#ctor(`0,Exiled.CustomModules.API.Features.CustomAbilities.CustomAbility{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovingAbilityEventArgs`1"/> class.
            </summary>
            <param name="entity"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovingAbilityEventArgs`1.Entity"/></param>
            <param name="ability"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovingAbilityEventArgs`1.Ability"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovingAbilityEventArgs`1.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovingAbilityEventArgs`1.Ability">
            <summary>
            Gets the custom ability being removed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovingAbilityEventArgs`1.Entity">
            <summary>
            Gets the entity to which the custom ability is being removed.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomAbilities.RemovingAbilityEventArgs`1.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs">
            <summary>
            Contains all information before escaping.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.#ctor(Exiled.API.Features.Player,PlayerRoles.RoleTypeId,Exiled.CustomModules.API.Features.CustomRoles.CustomRole,System.Byte,Exiled.API.Features.Hint,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.Player"/></param>
            <param name="newRole"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.NewRole"/></param>
            <param name="newCustomRole"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.NewCustomRole"/></param>
            <param name="scenarioType"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.ScenarioType"/></param>
            <param name="hint"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.Hint"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.NewRole">
            <summary>
            Gets or sets the new <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.NewCustomRole">
            <summary>
            Gets or sets the new <see cref="T:Exiled.CustomModules.API.Features.CustomRoles.CustomRole"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.ScenarioType">
            <summary>
            Gets or sets the <see cref="T:Exiled.CustomModules.API.Enums.UUEscapeScenarioType"/>.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomEscapes.EscapingEventArgs.Hint">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Hint"/> to be displayed.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs">
            <summary>
            Contains all information of a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> before a <see cref="T:Exiled.API.Features.Player"/> changes role.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs.#ctor(Exiled.API.Features.Items.Item,Exiled.CustomModules.API.Features.CustomItems.CustomItem,Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour,Exiled.Events.EventArgs.Player.ChangingRoleEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs"/> class.
            </summary>
            <param name="item"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs.Item"/></param>
            <param name="customItem"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs.CustomItem"/></param>
            <param name="itemBehaviour"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs.ItemBehaviour"/></param>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs.#ctor(Exiled.API.Features.Items.Item,Exiled.CustomModules.API.Features.CustomItems.CustomItem,Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour,Exiled.API.Features.Player,PlayerRoles.RoleTypeId,System.Boolean,PlayerRoles.RoleChangeReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs"/> class.
            </summary>
            <param name="item"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs.Item"/></param>
            <param name="customItem"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs.CustomItem"/></param>
            <param name="itemBehaviour"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs.ItemBehaviour"/></param>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.Player"/></param>
            <param name="newRole"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.NewRole"/></param>
            <param name="shouldPreserveInventory"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.ShouldPreserveInventory"/></param>
            <param name="reason"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.Reason"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs.CustomItem">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerChangingRoleEventArgs.ItemBehaviour">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerDyingEventArgs">
            <summary>
            Contains all information of a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> before a <see cref="T:Exiled.API.Features.Player"/> dies.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerDyingEventArgs.#ctor(Exiled.API.Features.Items.Item,Exiled.CustomModules.API.Features.CustomItems.CustomItem,Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour,Exiled.Events.EventArgs.Player.DyingEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerDyingEventArgs"/> class.
            </summary>
            <param name="item"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerDyingEventArgs.Item"/></param>
            <param name="customItem"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerDyingEventArgs.CustomItem"/></param>
            <param name="itemBehaviour"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerDyingEventArgs.ItemBehaviour"/></param>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.HandcuffingEventArgs"/> instance.</param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerDyingEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerDyingEventArgs.CustomItem">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerDyingEventArgs.ItemBehaviour">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs">
            <summary>
            Contains all information of a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>  before a <see cref="T:Exiled.API.Features.Player"/> escapes.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs.#ctor(Exiled.API.Features.Items.Item,Exiled.CustomModules.API.Features.CustomItems.CustomItem,Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour,Exiled.Events.EventArgs.Player.EscapingEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs"/> class.
            </summary>
            <param name="item"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs.Item"/></param>
            <param name="customItem"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs.CustomItem"/></param>
            <param name="itemBehaviour"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs.ItemBehaviour"/></param>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.EscapingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs.#ctor(Exiled.API.Features.Items.Item,Exiled.CustomModules.API.Features.CustomItems.CustomItem,Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour,Exiled.API.Features.Player,PlayerRoles.RoleTypeId,Exiled.API.Enums.EscapeScenario,System.Collections.Generic.KeyValuePair{Respawning.SpawnableTeamType,System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs"/> class.
            </summary>
            <param name="item"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs.Item"/></param>
            <param name="customItem"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs.CustomItem"/></param>
            <param name="itemBehaviour"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs.ItemBehaviour"/></param>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.Player"/></param>
            <param name="newRole"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.NewRole"/></param>
            <param name="escapeScenario"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.EscapeScenario"/></param>
            <param name="respawnTickets"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.RespawnTickets"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs.CustomItem">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerEscapingEventArgs.ItemBehaviour">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs">
            <summary>
            Contains all information of a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>  before handcuffing a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs.#ctor(Exiled.API.Features.Items.Item,Exiled.CustomModules.API.Features.CustomItems.CustomItem,Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour,Exiled.Events.EventArgs.Player.HandcuffingEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs"/> class.
            </summary>
            <param name="item"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs.Item"/></param>
            <param name="customItem"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs.CustomItem"/></param>
            <param name="itemBehaviour"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs.ItemBehaviour"/></param>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.HandcuffingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs.#ctor(Exiled.API.Features.Items.Item,Exiled.CustomModules.API.Features.CustomItems.CustomItem,Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour,Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs"/> class.
            </summary>
            <param name="item"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs.Item"/></param>
            <param name="customItem"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs.CustomItem"/></param>
            <param name="itemBehaviour"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs.ItemBehaviour"/></param>
            <param name="cuffer"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.HandcuffingEventArgs.Player"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.HandcuffingEventArgs.Target"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.HandcuffingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs.CustomItem">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.OwnerHandcuffingEventArgs.ItemBehaviour">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingEventArgs">
            <summary>
            Contains all information before a <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> gets upgraded.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingEventArgs.#ctor(Exiled.API.Features.Pickups.Pickup,Exiled.CustomModules.API.Features.CustomItems.CustomItem,Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour,UnityEngine.Vector3,Scp914.Scp914KnobSetting,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingEventArgs"/> class.
            </summary>
            <param name="pickup"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.Pickup"/></param>
            <param name="customItem"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingEventArgs.CustomItem"/></param>
            <param name="itemBehaviour"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingEventArgs.ItemBehaviour"/></param>
            <param name="newPos"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.OutputPosition"/></param>
            <param name="knobSetting"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.KnobSetting"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingEventArgs.CustomItem">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingEventArgs.ItemBehaviour">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingItemEventArgs">
            <summary>
            Contains all information of a <see cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingItemEventArgs.CustomItem"/> before a <see cref="T:Exiled.API.Features.Player"/>'s inventory item is upgraded.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ItemBase,Exiled.CustomModules.API.Features.CustomItems.CustomItem,Exiled.CustomModules.API.Features.CustomItems.Items.ItemBehaviour,Scp914.Scp914KnobSetting,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingItemEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="T:Exiled.API.Features.Player"/></param>
            <param name="customItem"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingItemEventArgs.CustomItem"/></param>
            <param name="itemBehaviour"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingItemEventArgs.ItemBehaviour"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.Item"/></param>
            <param name="knobSetting"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.KnobSetting"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingItemEventArgs.CustomItem">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.UpgradingItemEventArgs.ItemBehaviour">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomItems.ICustomItemEvent">
            <summary>
            Represents a marker interface used for all <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> related events.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.ICustomItemEvent.CustomItem">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> in the player's inventory.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.ICustomItemEvent.ItemBehaviour">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>'s behaviour.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomItems.ICustomPickupEvent">
            <summary>
            Represents a marker interface used for all <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> pickup related events.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.ICustomPickupEvent.CustomItem">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/> in the player's inventory.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomItems.ICustomPickupEvent.ItemBehaviour">
            <summary>
            Gets the <see cref="T:Exiled.CustomModules.API.Features.CustomItems.CustomItem"/>'s behaviour.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomRoles.AssigningHumanCustomRolesEventArgs">
            <summary>
            Contains all information before assigning human roles.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomRoles.AssigningHumanCustomRolesEventArgs.#ctor(System.Collections.Generic.List{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomRoles.AssigningHumanCustomRolesEventArgs" /> class.
            </summary>
            <param name="roles"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.AssigningHumanCustomRolesEventArgs.Roles"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.AssigningHumanCustomRolesEventArgs.Roles">
            <summary>
            Gets or sets all roles to be assigned.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomRoles.AssigningScpCustomRolesEventArgs">
            <summary>
            Contains all information before assigning SCP roles.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomRoles.AssigningScpCustomRolesEventArgs.#ctor(System.Collections.Generic.List{ReferenceHub},System.Collections.Generic.List{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomRoles.AssigningScpCustomRolesEventArgs" /> class.
            </summary>
            <param name="chosenPlayers"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.AssigningScpCustomRolesEventArgs.Players"/></param>
            <param name="enqueuedScps"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.AssigningScpCustomRolesEventArgs.Roles"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.AssigningScpCustomRolesEventArgs.Players">
            <summary>
            Gets or sets the players to be spawned.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.AssigningScpCustomRolesEventArgs.Roles">
            <summary>
            Gets or sets all roles to be assigned.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangedCustomRoleEventArgs">
            <summary>
            Contains all information after a player changes role to a custom role.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangedCustomRoleEventArgs.#ctor(Exiled.API.Features.Player,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangedCustomRoleEventArgs" /> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangedCustomRoleEventArgs.Player"/></param>
            <param name="role"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangedCustomRoleEventArgs.Role"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangedCustomRoleEventArgs.Player">
            <summary>
            Gets the player who changed role.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangedCustomRoleEventArgs.Role">
            <summary>
            Gets the previous role.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangingCustomRoleEventArgs">
            <summary>
            Contains all information before a player changes role to a custom role.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangingCustomRoleEventArgs.#ctor(Exiled.API.Features.Player,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangingCustomRoleEventArgs" /> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangingCustomRoleEventArgs.Player"/></param>
            <param name="role"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangingCustomRoleEventArgs.Role"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangingCustomRoleEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangingCustomRoleEventArgs.Player">
            <summary>
            Gets or sets the player who's changing role.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangingCustomRoleEventArgs.Role">
            <summary>
            Gets or sets the role to be changed to.
            <para/>
            Supports both roles and custom roles.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.ChangingCustomRoleEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the player can change role.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.CustomRoles.SelectingCustomTeamRespawnEventArgs">
            <summary>
            Contains all information before selecting the next known team.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.CustomRoles.SelectingCustomTeamRespawnEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.CustomRoles.SelectingCustomTeamRespawnEventArgs" /> class.
            </summary>
            <param name="team"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.SelectingCustomTeamRespawnEventArgs.Team"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.CustomRoles.SelectingCustomTeamRespawnEventArgs.Team">
            <summary>
            Gets or sets the next known team.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.Tracking.ItemTrackingModifiedEventArgs">
            <summary>
            Contains all information after modifying an item tracking.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.Tracking.ItemTrackingModifiedEventArgs.#ctor(Exiled.API.Features.Items.Item,System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Interfaces.ITrackable},System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Interfaces.ITrackable})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.Tracking.ItemTrackingModifiedEventArgs"/> class.
            </summary>
            <param name="item"><inheritdoc cref="T:Exiled.API.Features.Pickups.Pickup"/></param>
            <param name="previousAbilities"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.Tracking.TrackingModifiedEventArgs.PreviousTrackableItems"/></param>
            <param name="currentAbilities"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.Tracking.TrackingModifiedEventArgs.CurrentTrackableItems"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.Tracking.ItemTrackingModifiedEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.Tracking.PickupTrackingModifiedEventArgs">
            <summary>
            Contains all information after modifying a pickup tracking.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.Tracking.PickupTrackingModifiedEventArgs.#ctor(Exiled.API.Features.Pickups.Pickup,System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Interfaces.ITrackable},System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Interfaces.ITrackable})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.Tracking.PickupTrackingModifiedEventArgs"/> class.
            </summary>
            <param name="pickup"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.Tracking.PickupTrackingModifiedEventArgs.Pickup"/></param>
            <param name="previousAbilities"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.Tracking.TrackingModifiedEventArgs.PreviousTrackableItems"/></param>
            <param name="currentAbilities"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.Tracking.TrackingModifiedEventArgs.CurrentTrackableItems"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.Tracking.PickupTrackingModifiedEventArgs.Pickup">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.CustomModules.Events.EventArgs.Tracking.TrackingModifiedEventArgs">
            <summary>
            Contains all information after modifying a tracking.
            </summary>
        </member>
        <member name="M:Exiled.CustomModules.Events.EventArgs.Tracking.TrackingModifiedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Interfaces.ITrackable},System.Collections.Generic.IEnumerable{Exiled.CustomModules.API.Interfaces.ITrackable})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.CustomModules.Events.EventArgs.Tracking.TrackingModifiedEventArgs"/> class.
            </summary>
            <param name="previousAbilities"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.Tracking.TrackingModifiedEventArgs.PreviousTrackableItems"/></param>
            <param name="currentAbilities"><inheritdoc cref="P:Exiled.CustomModules.Events.EventArgs.Tracking.TrackingModifiedEventArgs.CurrentTrackableItems"/></param>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.Tracking.TrackingModifiedEventArgs.PreviousTrackableItems">
            <summary>
            Gets all previous abilities.
            </summary>
        </member>
        <member name="P:Exiled.CustomModules.Events.EventArgs.Tracking.TrackingModifiedEventArgs.CurrentTrackableItems">
            <summary>
            Gets all current abilities.
            </summary>
        </member>
        <member name="T:Exiled.CustomModules.Patches.PlayerInventorySee">
            <summary>
            Patches <see cref="M:CommandSystem.Commands.RemoteAdmin.PlayerInventoryCommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)"/>.
            Adds the CustomItem support.
            </summary>
        </member>
    </members>
</doc>
